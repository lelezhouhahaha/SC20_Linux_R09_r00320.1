# Copyright (c) 2018, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

policy_module(data, 1.0)

gen_require(`
    type mount_t;
    attribute mountpoint;
    attribute domain;
')

attribute user_data;
attribute domain_can_read_userdata;
attribute domain_can_write_userdata;

type data_t;
typeattribute data_t mountpoint;  # Can't use files_mountpoint here
user_data_files_type(data_t)

# Disallow generic reads/writes to userdata from the regular files API
#neverallow ~{
#    domain_can_read_userdata
#    domain_can_write_userdata
#    mount_t
#} user_data:file read_file_perms;
#neverallow ~{
#    domain_can_write_userdata
#    mount_t
#} user_data:file { create setattr write append rename link unlink };

attribute system_data;
attribute domain_can_read_systemdata;
attribute domain_can_write_systemdata;

type system_data_t;
typeattribute system_data_t mountpoint;  # Can't use files_mountpoint here
system_data_files_type(system_data_t)

# Disallow generic reads/writes to writable system data from the regular files API
neverallow ~{
    domain_can_read_systemdata
    domain_can_write_systemdata
    mount_t
} system_data:file read_file_perms;
neverallow ~{
    domain_can_write_systemdata
    mount_t
} system_data:file { create setattr write append rename link unlink };

# Disallow execution from any writable partition
gen_require(`
     type unconfined_t;
')
#neverallow { domain -unconfined_t } user_data:file { execute execute_no_trans };
#neverallow domain system_data:file { execute execute_no_trans };
type test_data_t;
user_data_files_type(test_data_t)
allow unconfined_t test_data_t:file exec_file_perms;
data_filetrans(unconfined_t, test_data_t, dir, "tests")
#neverallow unconfined_t { user_data -test_data_t }:file { execute execute_no_trans };
