# Copyright (c) 2018, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

## <summary>system directory</summary>

########################################
## <summary>
##      Read and write generic files in /etc.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`files_rw_qcmap_etc_data_files',`
        gen_require(`
                type qcmap_etc_data_t;
        ')

        manage_system_data_files($1, qcmap_etc_data_t, qcmap_etc_data_t)
')

########################################
## <summary>
##      Read and write sockets.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`read_write_qcmap_cm_socket_files',`
        gen_require(`
                type qcmap_cm_t;
        ')
         allow $1 qcmap_cm_t:{ netlink_route_socket udp_socket packet_socket rawip_socket } {read write };
')

########################################
## <summary>
##      Read and write sockets.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_cm_rw_sock_files',`
        gen_require(`
                type var_t;
                type NetworkManager_var_run_t;
        ')
         allow $1 var_t:sock_file { create unlink write };
         allow $1 NetworkManager_var_run_t:sock_file { write };
')

########################################
## <summary>
##      Read and write sockets.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_cm_sendto_unix_dgram_socket',`
        gen_require(`
                type qcmap_cm_t;
        ')
         allow $1 qcmap_cm_t:unix_dgram_socket { sendto };
')

########################################
## <summary>
##      Manage lighttpd files inside /data
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_manage_httpd_data_files',`
        gen_require(`
                type httpd_data_t;
        ')
         manage_user_data_files($1, httpd_data_t, httpd_data_t)
')

########################################
## <summary>
##      Transition created files to lighttpd domain
## </summary>
## <param name="domain">
##      <summary>
##      Domain creating the file
##      </summary>
## </param>
## <param name="filetype">
##      <summary>
##      Type of file being created
##      </summary>
## </param>
## <param name="filename">
##      <summary>
##      (optional): String of filename to transition
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_httpd_data_filetrans',`
        gen_require(`
                type httpd_data_t;
        ')
         data_filetrans($1, httpd_data_t, $2, $3)
')

########################################
## <summary>
##      Read and write sockets.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_cm_rw_unix_dgram_socket',`
        gen_require(`
                type qcmap_cm_t;
        ')
         allow $1 qcmap_cm_t:unix_dgram_socket rw_socket_perms;
')

########################################
## <summary>
##      Read and write sockets.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_cm_rw_unix_netlink_socket',`
        gen_require(`
                type qcmap_cm_t;
        ')
         allow $1 qcmap_cm_t:netlink_socket rw_socket_perms;
')

########################################
## <summary>
##      manage  /var/run/qcmap  dirs .
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_manage_var_run_qcmap_dir',`
        gen_require(`
                type qcmap_var_run_t;
        ')
        manage_dirs_pattern($1, qcmap_var_run_t, qcmap_var_run_t)
')

#######################################
## <summary>
##      Delete the dhcp client pid file.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`qcmap_delete_qcmap_pid',`
        gen_require(`
                type qcmap_var_run_t;
        ')

        allow $1 qcmap_var_run_t:file unlink;
')

########################################
## <summary>
##      Read and write qcmap  netlink_socket .
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_cm_rw_netlink_socket_files',`
        gen_require(`
                type qcmap_cm_t;
        ')
         allow $1 qcmap_cm_t:netlink_socket rw_socket_perms;
')

########################################
## <summary>
##      Read and write qcmap unix dgarmsocket .
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_cm_rw_unix_dgram_socket_files',`
        gen_require(`
                type qcmap_cm_t;
        ')
         allow $1 qcmap_cm_t:unix_dgram_socket rw_socket_perms;
')

########################################
## <summary>
##      Read qcmap related files in /etc.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
## <rolecap/>
#
interface(`qcmap_read_qcmap_etc_data_files',`
        gen_require(`
                type qcmap_etc_data_t;
                attribute domain_can_read_systemdata;
        ')
         typeattribute $1 domain_can_read_systemdata;
        read_system_data_files($1, qcmap_etc_data_t)
')

#######################################
## <summary>
##      manage the qcmap client pid file.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`qcmap_manage_qcmap_pid',`
        gen_require(`
                type qcmap_var_run_t;
        ')

        allow $1 qcmap_var_run_t:file manage_file_perms;
        allow $1 qcmap_var_run_t:sock_file manage_sock_file_perms;
')
