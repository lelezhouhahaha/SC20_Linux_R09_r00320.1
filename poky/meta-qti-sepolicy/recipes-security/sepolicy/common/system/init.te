# Copyright (c) 2016-2018, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

dev_relabelto_irsc_util(kernel_t)

allow init_t self:system { reboot halt };

#allow initrc_t data_t:file { read write };

# Included in later upstream versions
kernel_load_module(initrc_t)

# Systemd policies
ifdef(`init_systemd',`
    ifdef(`enable_mls',`
        mls_process_set_level(kernel_t)
        mls_file_upgrade(init_t)
    ')
    
    # Should be included in later upstream versions
    allow init_t {
        systemd_unit_t
        init_var_run_t
        power_unit_t
    }:service { status start stop };
    
    term_create_devpts_dirs(init_t)
    fs_search_cgroup_dirs(daemon)
    allow init_t daemon:unix_stream_socket create_stream_socket_perms;
    allow initrc_t init_t:system { start status reboot halt reload };
')

userdebug_or_eng(`
    # Write everything to serial console in userdebug mode
    allow domain init_t:fd use;
    term_write_all_terms(domain)
')

# find_partitions
data_mount_user(initrc_t)
mount_domtrans(initrc_t)
seutil_domtrans_setfiles(initrc_t)

gen_require(`
    attribute user_data;
    attribute system_data;
    type httpd_data_t;
    type qcmap_etc_data_t;
    type system_data_t;
    type data_t;
    type qnetmgrd_data_t;
    type audio-server-daemon_t;
    type servicemanager_t;
    type ion_device_t;
')

# If these neverallows are tripped, it likely means a daemon was created
#  without a unique context. Please update the file that launches the
#  service with a unique selinux context before allowing access to these
#  attributes.
#neverallow initrc_t { user_data -httpd_data_t -qcmap_etc_data_t }:file rw_file_perms;
#neverallow initrc_t { system_data -qcmap_etc_data_t }:file rw_file_perms;
search_user_data_dir(init_t)
search_system_data_dir(init_t)
search_system_data_dir(initrc_t)

# add sepolicy for write file to /data
permissive initrc_t;

# lighttpd files created before the lighttpd daemon starts as httpd_t
qcmap_httpd_data_filetrans(initrc_t, file, "mdm9625.com.key")
qcmap_httpd_data_filetrans(initrc_t, file, "nopwd.mdm9625.com.key")
qcmap_httpd_data_filetrans(initrc_t, file, "mdm9625.com.crt")
qcmap_httpd_data_filetrans(initrc_t, file, "mdm9625.com.pem")
qcmap_httpd_data_filetrans(initrc_t, file, "openssl.cnf")
qcmap_httpd_data_filetrans(initrc_t, dir, "www")
qcmap_manage_httpd_data_files(initrc_t)

userdebug_or_eng(`
    reboot_write_fifo_files_reboot_device(init_t)
')
alog_write_logdsocket(domain)
alog_setattr_logdsocket(initrc_t)
dontaudit init_t system_data_t:dir {read write};
dontaudit init_t data_t:dir read;

#added by peeta
gen_require(`
    type leprop_system_data_t;
    type loc_data_t;
')

allow initrc_t data_t:sock_file write;
allow initrc_t qcmap_etc_data_t:file { read getattr open };
allow initrc_t qnetmgrd_data_t:sock_file write;
allow initrc_t audio-server-daemon_t:binder { transfer call };
allow initrc_t servicemanager_t:binder call;
#dontaudit init_t data_t:file { create read write getattr setattr open };
#dontaudit init_t leprop_system_data_t:file { create read write getattr setattr open };
allow initrc_t data_t:file { create read write getattr setattr open };
allow initrc_t leprop_system_data_t:file { read getattr open };
allow initrc_t loc_data_t:dir { setattr read open read add_name remove_name write getattr search };
allow initrc_t loc_data_t:file { create read write getattr setattr open };
allow initrc_t data_t:sock_file getattr;
allow initrc_t system_data_t:file getattr;
