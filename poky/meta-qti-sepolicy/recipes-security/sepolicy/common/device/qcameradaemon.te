# Copyright (c) 2018, The Linux Foundation. All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

policy_module(qcameradaemon, 1.0)

#userdebug_or_eng(`
#    gen_require(`
#        type debugfs_t;
#        ') 
#  ')

gen_require(`
       type socket_device_t;
       type data_t;
       type debugfs_t;
       type ion_device_t;
       type sysctl_t;
       type sysfs_t;
       type gpu_device_t;
       type sysctl_vm_t;
       type tracefs_t;
  ')

type qcameradaemon_t;
type qcameradaemon_exec_t;
init_daemon_domain(qcameradaemon_t, qcameradaemon_exec_t)
inittab_domtrans(qcameradaemon_t, qcameradaemon_exec_t)

alog_rw_log(qcameradaemon_t)
leprop_rw_props(qcameradaemon_t)
dev_read_video_dev(qcameradaemon_t)
dev_write_video_dev(qcameradaemon_t )

rw_video_dev(qcameradaemon_t);
files_list_tmp(qcameradaemon_t);

allow qcameradaemon_t self:unix_dgram_socket { write connect create };
allow qcameradaemon_t socket_device_t:dir search;
#added by peeta
allow qcameradaemon_t data_t:dir { write remove_name search add_name };
allow qcameradaemon_t data_t:sock_file { create unlink };
allow qcameradaemon_t debugfs_t:dir search;
allow qcameradaemon_t ion_device_t:chr_file { read write open ioctl };
allow qcameradaemon_t sysctl_t:dir search ;
allow qcameradaemon_t sysfs_t:file { open read getattr };
allow qcameradaemon_t gpu_device_t:chr_file { read write open ioctl };
allow qcameradaemon_t sysctl_vm_t:dir search ;

allow qcameradaemon_t self:capability dac_override;
allow qcameradaemon_t self:unix_dgram_socket { read write bind };
allow qcameradaemon_t self:fifo_file { read write open };
allow qcameradaemon_t tracefs_t:filesystem mount;
