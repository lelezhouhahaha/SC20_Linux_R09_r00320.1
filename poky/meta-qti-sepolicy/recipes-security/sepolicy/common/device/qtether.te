# Copyright (c) 2018 The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

policy_module(qtether, 1.0)

type qtether_t;
type qtether_exec_t;

gen_require(`
    type shared_log_device_t;
')

init_daemon_domain(qtether_t, qtether_exec_t)
logging_send_syslog_msg(qtether_t)

userdebug_or_eng(`
    rw_diag_dev(qtether_t)
')

dev_write_kmsg(qtether_t)
dev_read_sysfs(qtether_t)
files_rw_qcmap_etc_data_files(qtether_t)
kernel_load_module(qtether_t)

allow qtether_t self:{ socket udp_socket } create_socket_perms;
allow qtether_t self:netlink_route_socket { create_socket_perms nlmsg_read nlmsg_write };
allow qtether_t self:fifo_file rw_fifo_file_perms;
allow qtether_t self:capability { net_raw net_admin };

# Don't implicitly load kernel modules
kernel_dontaudit_request_load_module(qtether_t)

type qtether_log_t;
user_data_files_type(qtether_log_t)
data_filetrans(qtether_t, qtether_log_t, file)
manage_user_data_files(qtether_t, qtether_log_t)

dev_write_kmsg(qtether_t)
dev_rw_generic_chr_files(qtether_t)
userdebug_or_eng(`
  rw_diag_dev(qtether_t);
')
corecmd_check_exec_shell(qtether_t);

sysnet_exec_ifconfig(qtether_t)
corecmd_exec_shell(qtether_t)
kernel_read_system_state(qtether_t)

#added by peeta
gen_require(`
    type default_t;
')
allow qtether_t shared_log_device_t:chr_file { read write };
allow qtether_t data_t:file { write open };
allow qtether_t shared_log_device_t:chr_file { ioctl open };
allow qtether_t default_t:dir search;
