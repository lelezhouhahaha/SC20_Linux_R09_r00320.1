# Copyright (c) 2018, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

policy_module(alogd, 1.0)

type alogd_t;
type alogd_exec_t;

init_daemon_domain(alogd_t, alogd_exec_t)

allow alogd_t self:unix_dgram_socket { sendto create_socket_perms };
allow alogd_t self:unix_stream_socket { connectto create_stream_socket_perms };
allow alogd_t self:netlink_audit_socket create_netlink_socket_perms;
allow alogd_t self:process { signal setsched };
allow alogd_t self:capability audit_control;

# read and write kernel logs
kernel_read_messages(alogd_t)
kernel_read_ring_buffer(alogd_t)
kernel_clear_ring_buffer(alogd_t)
dev_read_kmsg(alogd_t)
dev_write_kmsg(alogd_t)

# change logd* sockets to system:system
allow alogd_t self:capability { chown fowner fsetid setuid setgid };

# Label and manage /dev/socket nodes
type alogd_sock_t;
dev_node(alogd_sock_t)
device_manage_socket_file(alogd_t, alogd_sock_t, "logd")
device_manage_socket_file(alogd_t, alogd_sock_t, "logdr")
device_manage_socket_file(alogd_t, alogd_sock_t, "logdw")

leprop_rw_props(alogd_t)

read_files_pattern(alogd_t, domain, domain)

# Allow all domains to send messages to alogd (but not read)
allow domain alogd_sock_t:sock_file write_sock_file_perms;
allow domain alogd_t:unix_dgram_socket sendto;
