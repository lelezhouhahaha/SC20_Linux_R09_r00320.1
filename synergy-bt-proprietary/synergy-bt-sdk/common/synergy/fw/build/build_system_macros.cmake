##############################################################################
#
# Copyright (c) 2010-2015 Qualcomm Technologies International, Ltd.
# All Rights Reserved. 
# Qualcomm Technologies International, Ltd. Confidential and Proprietary.
#       
##############################################################################

include (CMakeDependentOption)

# Internal flags - Do not modify
set(CSR_INTERNAL_PLATFORM)
set(CSR_INTERNAL_GROUP_NAME)
set(CSR_INTERNAL_GROUP_SHOULD_BUILD TRUE)
set(CSR_INTERNAL_BINARY_ONLY_COMPONENTS FALSE)

set(CSR_COMPONENTS)
set(CSR_COMPONENTS_SELECTED)

set_property(GLOBAL PROPERTY CSR_CACHE_CONFIG_VALUES "")
set_property(GLOBAL PROPERTY CSR_CACHE_CONFIG_OVERRIDES "")

set(CSR_BUILD_SYSTEM_DEBUG OFF CACHE BOOL "Build system debugging mode")
mark_as_advanced(CSR_BUILD_SYSTEM_DEBUG)

macro(csr_debug_create)
    if (${CSR_BUILD_SYSTEM_DEBUG})
        set (CSR_BUILD_SYSTEM_DEBUG_FILE "${PROJECT_BINARY_DIR}/buildsystem.txt")
        file (WRITE ${CSR_BUILD_SYSTEM_DEBUG_FILE} "CSR Synergy Build System Report\n\n")
    endif()
endmacro(csr_debug_create)

macro(csr_debug_output)
    if (${CSR_BUILD_SYSTEM_DEBUG})
        foreach(_currentArg ${ARGN})
            file (APPEND ${CSR_BUILD_SYSTEM_DEBUG_FILE} "${_currentArg}")
        endforeach()
    endif()
endmacro(csr_debug_output)

macro (csr_configure_install file component )
    csr_validate_component(${component} _selected)
    if (DEFINED ${component})
        set (_dest ${file})
        set (_copy_type ${ARGN})
        string (REGEX REPLACE ".in$" "" _dest ${_dest})
        string (REGEX REPLACE ".dist$" "" _dest ${_dest})
        csr_install_files(COMPONENT ${component} ${file})
        configure_file(${file} ${_dest} ${_copy_type})
    endif()
endmacro()

macro(csr_install_in_use_files technology dir)
    if(DEFINED CSR_PRODUCT_FILE)
        csr_location_in_use(${technology} "${dir}" _in_use)

        if(${_in_use})
            if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${dir}/CMakeLists.txt.dist")
                set (_install_src "${CMAKE_CURRENT_BINARY_DIR}/${dir}/CMakeLists.txt")
                configure_file(${dir}/CMakeLists.txt.dist ${_install_src} COPYONLY)
            else()
                set(_install_src "${dir}/CMakeLists.txt")
            endif()
            if ("${CMAKE_CURRENT_SOURCE_DIR}/${dir}" STREQUAL "${CSR_${CSR_CURRENT_TECHNOLOGY}_ROOT}/config")
                if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${dir}/csr_${CSR_CURRENT_TECHNOLOGY_LC}_config.cmake.dist")
                    set (_install_src_config "${CMAKE_CURRENT_BINARY_DIR}/${dir}/csr_${CSR_CURRENT_TECHNOLOGY_LC}_config.cmake")
                    configure_file(${dir}/csr_${CSR_CURRENT_TECHNOLOGY_LC}_config.cmake.dist ${_install_src_config} COPYONLY)
                    list(APPEND _install_src ${_install_src_config})
                else()
                    if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${dir}/csr_${CSR_CURRENT_TECHNOLOGY_LC}_config.cmake")
                        set(_install_src_config "${dir}/csr_${CSR_CURRENT_TECHNOLOGY_LC}_config.cmake")
                        list(APPEND _install_src ${_install_src_config})
                    endif()
                endif()
            endif()
		csr_install_files(COMPONENT CSR_COMPONENT_${technology}_BUILD TECHNOLOGY ${technology} ${_install_src})
        else()
            get_filename_component(_abs_dir ${dir} ABSOLUTE)
            file (RELATIVE_PATH _relative_dir ${PROJECT_SOURCE_DIR} ${_abs_dir})
            if (${CSR_BUILD_SYSTEM_DEBUG})
                message (STATUS "Skipping buildsystem install: ${_relative_dir}")
            endif()
        endif()
    endif()


endmacro()

macro(csr_install_buildsystem)
    if(DEFINED CSR_PRODUCT_FILE)
        # Handle artifacts mapping
        list(LENGTH CSR_${CSR_CURRENT_TECHNOLOGY}_MAPPING_ARTIFACTS_LIST _count)
        if (${_count} EQUAL 0)
            get_property(CSR_${CSR_CURRENT_TECHNOLOGY}_MAPPING_ARTIFACTS_LIST GLOBAL PROPERTY CSR_${CSR_CURRENT_TECHNOLOGY}_ARTIFACT_MAPPING)
            list(REMOVE_DUPLICATES CSR_${CSR_CURRENT_TECHNOLOGY}_MAPPING_ARTIFACTS_LIST)
        endif()
        # Handle buildsystem install
        include (${CSR_${CSR_CURRENT_TECHNOLOGY}_INSTALL_FILE})
        csr_location_in_use(${CSR_CURRENT_TECHNOLOGY} "${CMAKE_CURRENT_SOURCE_DIR}" _in_use)
        if(${_in_use})
            message (STATUS "Installing buildsystem: ${CSR_CURRENT_TECHNOLOGY}")
            if (${CSR_BUILD_SYSTEM_DEBUG})
                file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "\n----------------------------------------------------\n\n")
            endif()
            foreach (_file groups.cmake includes.cmake ver.cmake)
                if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${_file}")
                csr_install_files(COMPONENT CSR_COMPONENT_${CSR_CURRENT_TECHNOLOGY}_BUILD TECHNOLOGY ${CSR_CURRENT_TECHNOLOGY} ${_file})
                endif()
            endforeach()
        endif()
    endif()
endmacro()

macro(csr_allow_install_rules _allow)

    if(DEFINED CSR_PRODUCT_FILE)
        set (${_allow} TRUE)
        foreach(_technology ${CSR_TECHNOLOGIES})
            if (NOT CSR_${_technology}_BUILDSYSTEM_AVAILABLE)
                set (${_allow} FALSE)
            endif()
        endforeach()
    else()
        set (${_allow} FALSE)
    endif()
endmacro()

function(csr_install_files)
    csr_allow_install_rules(_allow)
    if (_allow)

        set(_csr_macro_if_action "none")
        set(_csr_macro_if_files)
        set(_csr_macro_if_tech)
        set(_csr_macro_if_component)
        set(_csr_macro_if_install_type "all")
        set(_csr_macro_signature
                "csr_install_files(COMPONENT <name> file1 file2 ... fileN)")

        foreach(_currentArg ${ARGN})
            if ("${_currentArg}" STREQUAL "COMPONENT" OR
                "${_currentArg}" STREQUAL "INSTALL_TYPE" OR
                "${_currentArg}" STREQUAL "TECHNOLOGY")
                set(_csr_macro_if_action "${_currentArg}")
            elseif (${_csr_macro_if_action} STREQUAL "INSTALL_TYPE")
                set(_csr_macro_if_install_type "${_currentArg}")
            elseif (${_csr_macro_if_action} STREQUAL "TECHNOLOGY")
                set(_csr_macro_if_tech "${_currentArg}")
                set(_csr_macro_if_action "FILES")
            elseif (${_csr_macro_if_action} STREQUAL "COMPONENT")
                set(_csr_macro_if_component "${_currentArg}")
                csr_validate_component(${_csr_macro_if_component} _selected)
                set(_csr_macro_if_tech ${${_csr_macro_if_component}_TECHNOLOGY})
                set(_csr_macro_if_action "FILES")
                if (DEFINED ${_csr_macro_if_component})
                    if (NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "none" AND NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "bin")
                        csr_add_artifact_location(TECHNOLOGY ${_csr_macro_if_tech})
                    endif()
                endif()
            elseif(${_csr_macro_if_action} STREQUAL "FILES")
                if (NOT _csr_macro_if_component)
                    message (FATAL_ERROR "Tag: 'COMPONENT name' must the present prior to the list of files\n"
                                         ${_csr_macro_signature})
                endif()
                if (DEFINED ${_csr_macro_if_component})
                    list(APPEND _csr_macro_if_files "${_currentArg}")
                endif()
            else()
                message(FATAL_ERROR "Parameter ${_currentArg} is incorrect\n"
                                    ${_csr_macro_signature})
            endif()
        endforeach()
        if (NOT _csr_macro_if_component)
            message(FATAL_ERROR "COMPONENT information is missing\n"
                                ${_csr_macro_signature})
        endif()
        if (NOT _csr_macro_if_files)
            message(FATAL_ERROR "The list of files is empty\n"
                                ${_csr_macro_signature})
        endif()
        if (${CSR_BUILD_SYSTEM_DEBUG})
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "Install:\n")
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    File install type     : ${_csr_macro_if_install_type}\n")
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Component install type: ${${_csr_macro_if_component}_INSTALL_TYPE}\n")
        endif()

        if (((${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "all" AND NOT ${_csr_macro_if_install_type} STREQUAL "none") OR
             (NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "none" AND ${_csr_macro_if_install_type} STREQUAL "all") OR
             (${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "src" AND ${_csr_macro_if_install_type} STREQUAL "src") OR
             (${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "bin" AND ${_csr_macro_if_install_type} STREQUAL "bin")))
            set (_csr_macro_if_root "${CSR_${_csr_macro_if_tech}_ROOT}")
            if (${CSR_BUILD_SYSTEM_DEBUG})
                file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Root                  : ${_csr_macro_if_root}\n")
            endif()
            foreach(_csr_macro_if_file ${_csr_macro_if_files})
                get_filename_component(_csr_macro_if_abs ${_csr_macro_if_file} ABSOLUTE)
                get_filename_component(_csr_macro_if_path ${_csr_macro_if_abs} PATH)
                string(REGEX MATCH "^${PROJECT_BINARY_DIR}" _match ${_csr_macro_if_abs})
                if (_match)
                    file (RELATIVE_PATH _csr_if_dest ${PROJECT_BINARY_DIR}/${CSR_CURRENT_TECHNOLOGY_LC} ${_csr_macro_if_path})
                    if (_csr_if_dest)
                      string(REPLACE "/PURGE" "" _csr_if_dest ${_csr_if_dest})
                    endif()
                else()
                    string(REGEX MATCH "^${_csr_macro_if_root}" _match ${_csr_macro_if_abs})
                    if (_match)
                        file (RELATIVE_PATH _csr_if_dest ${_csr_macro_if_root} ${_csr_macro_if_path})
                    else()
                        message (FATAL_ERROR "Root folder for file ${_csr_macro_if_file} undetermined (${_csr_macro_if_root} - ${PROJECT_BINARY_DIR})")
                    endif()
                endif()
                if (NOT _csr_if_dest)
                    set (_csr_if_dest ".")
                endif()
                if (${CSR_BUILD_SYSTEM_DEBUG})
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    File:\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Filename absolute : ${_csr_macro_if_abs}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Filename original : ${_csr_macro_if_file}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Destination       : ${CSR_${_csr_macro_if_tech}_VERSION_MAJOR}.${CSR_${_csr_macro_if_tech}_VERSION_MINOR}.${CSR_${_csr_macro_if_tech}_VERSION_FIXANDBUILD}/${_csr_if_dest}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Component         : ${_csr_macro_if_tech}\n")
                endif()
                    install(FILES ${_csr_macro_if_file} DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${_csr_macro_if_tech}_VERSION_MAJOR}.${CSR_${_csr_macro_if_tech}_VERSION_MINOR}.${CSR_${_csr_macro_if_tech}_VERSION_FIXANDBUILD}/${_csr_if_dest} COMPONENT ${_csr_macro_if_tech})
            endforeach()
        endif()
    endif()
endfunction(csr_install_files)

macro(csr_add_headers)
    csr_allow_install_rules(_allow)
    if (_allow)
        set(_csr_macro_if_action "none")
        set(_csr_macro_if_files)
        set(_csr_macro_if_component)
        set(_csr_macro_if_tech)
        set(_csr_macro_platform_list)
        set(_csr_macro_signature
                "csr_add_headers(COMPONENT <name> header1 header2 ... headerN [PLATFORM <platform>])")


        foreach(_currentArg ${ARGN})
            if ("${_currentArg}" STREQUAL "COMPONENT" OR
                "${_currentArg}" STREQUAL "PLATFORM")
                set(_csr_macro_if_action "${_currentArg}")
            elseif (${_csr_macro_if_action} STREQUAL "COMPONENT")
                set(_csr_macro_if_component "${_currentArg}")
                csr_validate_component(${_csr_macro_if_component} _selected)
                set(_csr_macro_if_tech ${${_csr_macro_if_component}_TECHNOLOGY})
                set(_csr_macro_if_action "FILES")
                if (DEFINED ${_csr_macro_if_component})
                    if (NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "none" AND NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "bin")
                        csr_add_artifact_location()
                    endif()
                endif()
            elseif(${_csr_macro_if_action} STREQUAL "FILES")
                if (NOT _csr_macro_if_component)
                    message (FATAL_ERROR "Tag: 'COMPONENT name' must the present prior to the list of files\n"
                                         ${_csr_macro_signature})
                endif()
                if (DEFINED ${_csr_macro_if_component})
                    list(APPEND _csr_macro_if_files "${_currentArg}")
                endif()
            elseif (${_csr_macro_if_action} STREQUAL "PLATFORM")
                list(APPEND _csr_macro_platform_list "${_currentArg}")
            else()
                message(FATAL_ERROR "Parameter ${_currentArg} is incorrect\n"
                                    ${_csr_macro_signature})
            endif()
        endforeach()
        if (NOT _csr_macro_if_component)
            message(FATAL_ERROR "COMPONENT information is missing\n"
                                ${_csr_macro_signature})
        endif()
        if (NOT _csr_macro_if_files)
            message(FATAL_ERROR "The list of files is empty\n"
                                ${_csr_macro_signature})
        endif()

        set (_csr_macro_should_dump FALSE)
        if (_csr_macro_platform_list)
            foreach (_csr_macro_platform ${_csr_macro_platform_list})
                if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                    set (_csr_macro_should_dump ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
                endif()
            endforeach()
        elseif (CSR_INTERNAL_PLATFORM)
            foreach (_csr_macro_platform ${CSR_INTERNAL_PLATFORM})
                if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                    set (_csr_macro_should_dump ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
                endif()
            endforeach()
        else()
            set (_csr_macro_should_dump ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
        endif()

        if (${CSR_BUILD_SYSTEM_DEBUG})
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "Install:\n")
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Component install type: ${${_csr_macro_if_component}_INSTALL_TYPE}\n")
        endif()

        if (NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "none")
            set (_csr_macro_if_root "${CSR_${_csr_macro_if_tech}_ROOT}")
            if (${CSR_BUILD_SYSTEM_DEBUG})
                file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Root                  : ${_csr_macro_if_root}\n")
            endif()
            foreach(_csr_macro_if_file ${_csr_macro_if_files})
                if (${_csr_macro_should_dump})
                    if (CSR_DUMP_FILES_INTO_SINGLE_DIR AND _selected)
                        configure_file(${_csr_macro_if_file} ${CSR_INC_GLOBAL} COPYONLY)
                    endif()
                endif()
                get_filename_component(_csr_macro_if_abs ${_csr_macro_if_file} ABSOLUTE)
                get_filename_component(_csr_macro_if_path ${_csr_macro_if_abs} PATH)
                string(REGEX MATCH "^${_csr_macro_if_root}" _match ${_csr_macro_if_abs})
                if (_match)
                    file (RELATIVE_PATH _csr_if_dest ${_csr_macro_if_root} ${_csr_macro_if_path})
                else()
                    message (FATAL_ERROR "Root folder for file ${_csr_macro_if_file} undetermined (${_csr_macro_if_root} - ${PROJECT_BINARY_DIR})")
                endif()
                if (NOT _csr_if_dest)
                    set (_csr_if_dest ".")
                endif()
                if (${CSR_BUILD_SYSTEM_DEBUG})
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Header:\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Filename absolute : ${_csr_macro_if_abs}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Filename original : ${_csr_macro_if_file}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Destination       : ${CSR_${_csr_macro_if_tech}_VERSION_MAJOR}.${CSR_${_csr_macro_if_tech}_VERSION_MINOR}.${CSR_${_csr_macro_if_tech}_VERSION_FIXANDBUILD}/${_csr_if_dest}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Component         : ${_csr_macro_if_tech}\n")
                endif()
                install(FILES ${_csr_macro_if_file} DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${_csr_macro_if_tech}_VERSION_MAJOR}.${CSR_${_csr_macro_if_tech}_VERSION_MINOR}.${CSR_${_csr_macro_if_tech}_VERSION_FIXANDBUILD}/${_csr_if_dest} COMPONENT ${_csr_macro_if_tech})
            endforeach()
        endif()
    endif()
endmacro(csr_add_headers)

macro(csr_find_technology file tech)
    set (${tech})
    foreach(_technology ${CSR_TECHNOLOGIES})
        string(TOLOWER ${_technology} _technology_lc)
        if (${file} MATCHES "^${CSR_${_technology}_ROOT}" OR ${file} MATCHES "^${PROJECT_BINARY_DIR}/${_technology_lc}")
            set (${tech} ${_technology})
            break()
        endif()
    endforeach()
endmacro()

macro(csr_add_files)
    csr_allow_install_rules(_allow)
    if (_allow)
        set(_csr_macro_if_action "none")
        set(_csr_macro_if_files)
        set(_csr_macro_if_tech)
        set(_csr_macro_if_component)
        set(_csr_macro_purge_defines)
        set(_csr_macro_signature
                "csr_add_files(COMPONENT <name> [PURGE_DEFINES <defines>] FILES files1 files2 ... filesN)")

        foreach(_currentArg ${ARGN})
            if (${_csr_macro_if_action} STREQUAL "PURGE_DEFINES")
                if ("_${_currentArg}" STREQUAL "_FILES")
                    set(_csr_macro_if_action "${_currentArg}")
                else()
                    list(APPEND _csr_macro_purge_defines "${_currentArg}")
                endif()
            elseif ("${_currentArg}" STREQUAL "COMPONENT" OR
                    "${_currentArg}" STREQUAL "FILES" OR
                    "${_currentArg}" STREQUAL "PURGE_DEFINES")
                set(_csr_macro_if_action "${_currentArg}")
                set(_csr_macro_purge_defines)
            elseif (${_csr_macro_if_action} STREQUAL "COMPONENT")
                set(_csr_macro_if_component "${_currentArg}")
                csr_validate_component(${_csr_macro_if_component} _selected)
                set(_csr_macro_if_tech ${${_csr_macro_if_component}_TECHNOLOGY})
                set(_csr_macro_if_action "none")
                if (DEFINED ${_csr_macro_if_component})
                    if (NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "none" AND NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "bin")
                        csr_add_artifact_location()
                    endif()
                endif()
            elseif(${_csr_macro_if_action} STREQUAL "FILES")
                get_filename_component(_csr_macro_file "${_currentArg}" ABSOLUTE)
                if (DEFINED ${_csr_macro_if_component})
                    if (_csr_macro_purge_defines)
                        csr_purge_code(${_csr_macro_file} _csr_macro_file ${_csr_macro_purge_defines})
                    endif()
                    list(APPEND _csr_macro_if_files "${_csr_macro_file}")
                endif()
            else()
                message(FATAL_ERROR "Parameter ${_currentArg} is incorrect\n"
                                    ${_csr_macro_signature})
            endif()
        endforeach()
        if (NOT _csr_macro_if_component)
            message(FATAL_ERROR "COMPONENT information is missing\n"
                                ${_csr_macro_signature})
        endif()
        if (NOT _csr_macro_if_files)
            message(FATAL_ERROR "The list of files is empty\n"
                                ${_csr_macro_signature})
        endif()

        if (${CSR_BUILD_SYSTEM_DEBUG})
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "Install:\n")
            file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Component install type: ${${_csr_macro_if_component}_INSTALL_TYPE}\n")
        endif()

        if (NOT ${${_csr_macro_if_component}_INSTALL_TYPE} STREQUAL "none")
            foreach(_csr_macro_if_file ${_csr_macro_if_files})
                get_filename_component(_csr_macro_if_abs ${_csr_macro_if_file} ABSOLUTE)
                get_filename_component(_csr_macro_if_path ${_csr_macro_if_abs} PATH)
                set (_csr_macro_if_root "${CSR_${CSR_CURRENT_TECHNOLOGY}_ROOT}")
                string(REGEX MATCH "^${PROJECT_BINARY_DIR}" _match ${_csr_macro_if_abs})
                if (_match)
                    file (RELATIVE_PATH _csr_if_dest ${PROJECT_BINARY_DIR}/${CSR_CURRENT_TECHNOLOGY_LC} ${_csr_macro_if_path})
                    string(REPLACE "/PURGE" "" _csr_if_dest ${_csr_if_dest})
                else()
                    string(REGEX MATCH "^${_csr_macro_if_root}" _match ${_csr_macro_if_abs})
                    if (_match)
                        file (RELATIVE_PATH _csr_if_dest ${_csr_macro_if_root} ${_csr_macro_if_path})
                    else()
                        message (FATAL_ERROR "Root folder for file ${_csr_macro_if_file} undetermined (${_csr_macro_if_root} - ${PROJECT_BINARY_DIR})")
                    endif()
                endif()
                if (NOT _csr_if_dest)
                    set (_csr_if_dest ".")
                endif()
                if (${CSR_BUILD_SYSTEM_DEBUG})
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Root                  : ${_csr_macro_if_root}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "    Files:\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Filename absolute : ${_csr_macro_if_abs}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Filename original : ${_csr_macro_if_file}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Destination       : ${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MAJOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MINOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_FIXANDBUILD}/${_csr_if_dest}\n")
                    file (APPEND ${CSR_BUILD_DEBUG_INSTALL_FILE} "      - Component         : ${CSR_CURRENT_TECHNOLOGY}\n")
                endif()
                install(FILES ${_csr_macro_if_file} DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MAJOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MINOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_FIXANDBUILD}/${_csr_if_dest} COMPONENT ${CSR_CURRENT_TECHNOLOGY})
            endforeach()
        endif()
    endif()
endmacro(csr_add_files)

macro(csr_install_directory)
    csr_allow_install_rules(_allow)
    if (_allow)
        set(_csr_macro_id_action "none")
        set(_csr_macro_id_directories)
        set(_csr_macro_id_component)
        set(_csr_macro_id_install_type "all")
        set(_csr_macro_id_tech)
        set(_csr_macro_id_signature
                "csr_install_directory(COMPONENT <name> dir1 dir2 ... dirN)")

        foreach(_currentArg ${ARGN})
            if ("${_currentArg}" STREQUAL "COMPONENT" OR
                "${_currentArg}" STREQUAL "FILTER" OR
                "${_currentArg}" STREQUAL "INSTALL_TYPE" OR
                "${_currentArg}" STREQUAL "TECHNOLOGY")
                set(_csr_macro_id_action "${_currentArg}")
            elseif (${_csr_macro_id_action} STREQUAL "COMPONENT")
                set(_csr_macro_id_component "${_currentArg}")
                csr_validate_component(${_csr_macro_id_component} _selected)
                set(_csr_macro_id_tech ${${_csr_macro_id_component}_TECHNOLOGY})
                set(_csr_macro_id_action "DIRECTORY")
            elseif (${_csr_macro_id_action} STREQUAL "TECHNOLOGY")
                set(_csr_macro_id_tech "${_currentArg}")
                set(_csr_macro_id_action "DIRECTORY")
            elseif (${_csr_macro_id_action} STREQUAL "INSTALL_TYPE")
                set(_csr_macro_id_install_type "${_currentArg}")
            elseif(${_csr_macro_id_action} STREQUAL "DIRECTORY")
                if (NOT _csr_macro_id_component)
                    message (FATAL_ERROR "Tag: 'COMPONENT name' must the present prior to the directory")
                endif()
                if (DEFINED ${_csr_macro_id_component})
                    set(_csr_macro_id_directories "${_csr_macro_id_directories}" "${_currentArg}")
                endif()
            else()
                message(FATAL_ERROR "Parameter ${_currentArg} is incorrect\n"
                                    ${_csr_macro_id_signature})
            endif()
        endforeach()
        if (NOT _csr_macro_id_component)
            message(FATAL_ERROR "COMPONENT information is missing\n"
                                ${_csr_macro_id_signature})
        endif()
        if (NOT _csr_macro_id_directories)
            message(FATAL_ERROR "The list of directories is empty\n"
                                ${_csr_macro_id_signature})
        endif()
        if (((${_csr_macro_id_install_type} STREQUAL "all" AND NOT ${${_csr_macro_id_component}_INSTALL_TYPE} STREQUAL "none") OR
             (${_csr_macro_id_install_type} STREQUAL "src" AND ${${_csr_macro_id_component}_INSTALL_TYPE} STREQUAL "src") OR
             (${_csr_macro_id_install_type} STREQUAL "bin" AND ${${_csr_macro_id_component}_INSTALL_TYPE} STREQUAL "bin")))
            set (_csr_macro_id_root "${CSR_${_csr_macro_id_tech}_ROOT}")
            foreach (_csr_macro_id_directory ${_csr_macro_id_directories})
                get_filename_component(_csr_macro_id_abs "${_csr_macro_id_directory}" ABSOLUTE)
                string(REGEX MATCH "${PROJECT_BINARY_DIR}/(.*)" _match ${_csr_macro_id_abs})
                if (_match)
                    file (RELATIVE_PATH _csr_id_dest ${PROJECT_BINARY_DIR} ${_csr_macro_id_abs})
                else()
                    string(REGEX MATCH "${_csr_macro_id_root}/(.*)" _match ${_csr_macro_id_abs})
                    if(_match)
                        file (RELATIVE_PATH _csr_id_dest ${_csr_macro_id_root} ${_csr_macro_id_abs})
                    else()
                        message (FATAL_ERROR "The directory '${_csr_macro_id_abs}' is not part of the output directory or the root of the component")
                    endif()
                endif()
                install(DIRECTORY ${_csr_macro_id_directory}/ DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${_csr_macro_id_tech}_VERSION_MAJOR}.${CSR_${_csr_macro_id_tech}_VERSION_MINOR}.${CSR_${_csr_macro_id_tech}_VERSION_FIXANDBUILD}/${_csr_id_dest} USE_SOURCE_PERMISSIONS COMPONENT ${_csr_macro_id_tech})
            endforeach()
        endif()
    endif()
endmacro(csr_install_directory)

macro(csr_evaluate_condition outvar condition)
    if (${condition})
        set (${outvar} TRUE)
    else()
        set (${outvar} FALSE)
    endif()
    csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} " # Conditional check: ${condition} evaluated to ${${outvar}}\n")
endmacro()

macro(csr_validate_component _csr_macro_component selected)
    set (${selected} TRUE)
    list (FIND CSR_COMPONENTS_SELECTED ${_csr_macro_component} _index)
    if (${_index} EQUAL -1)
        set (${selected} FALSE)
        list (FIND CSR_COMPONENTS ${_csr_macro_component} _index)
        if (${_index} EQUAL -1)
            if (${CSR_BUILD_INTERNAL} AND NOT CSR_BACKWARDS_COMPATIBILITY_ENABLE)
                message (FATAL_ERROR "Component ${_csr_macro_component} NOT defined")
            endif()
        endif()
    endif()
endmacro()

macro(csr_install_components)
    if(DEFINED CSR_PRODUCT_FILE)
        set(_csr_macro_components)
        set(_csr_macro_action "NONE")
        foreach(_currentArg ${ARGN})
            if ("${_currentArg}" STREQUAL "SOURCE_BINARY" OR
                "${_currentArg}" STREQUAL "BINARY_ONLY" OR
                "${_currentArg}" STREQUAL "SOURCE_ONLY")
                set(_csr_macro_action "${_currentArg}")
            elseif (NOT ${_csr_macro_action} STREQUAL "NONE")
                csr_validate_component(${_currentArg} _selected)
                list(APPEND CSR_COMPONENTS_SELECTED ${_currentArg})
                list(SORT CSR_COMPONENTS_SELECTED)

                if (${_currentArg}_BINARY_ONLY AND NOT ${_csr_macro_action} STREQUAL "BINARY_ONLY")
                    message (FATAL_ERROR "Component ${_currentArg} is only available in a binary edition")
                endif()

                if (${_csr_macro_action} STREQUAL "BINARY_ONLY")
                    set (CSR_INTERNAL_BINARY_ONLY_COMPONENTS TRUE)
                    set(${_currentArg}_BINARY_ONLY TRUE)
                endif()

                if (${_csr_macro_action} STREQUAL "SOURCE_BINARY")
                    set (${_currentArg}_INSTALL_TYPE "all")
                elseif (${_csr_macro_action} STREQUAL "BINARY_ONLY")
                    set (${_currentArg}_INSTALL_TYPE "bin")
                elseif (${_csr_macro_action} STREQUAL "SOURCE_ONLY")
                    set (${_currentArg}_INSTALL_TYPE "src")
                endif()

                set_property(GLOBAL PROPERTY ${_currentArg}_LIBRARIES "")
            else()
                message(FATAL_ERROR "Parameter incorrect\n"
                    "csr_install_components([SOURCE_BINARY component1 component2 ... componentN]\n"
                    "                       [SOURCE_ONLY component1 component2 ... componentN]\n"
                    "                       [BINARY_ONLY component1 component2 ... componentN])")
            endif()
        endforeach()
    endif()
endmacro(csr_install_components)

macro(csr_define_component component_namespace)
    set(_csr_macro_depends)
    set(_csr_macro_protected FALSE)
    set(_csr_macro_binary FALSE)
    set(_csr_macro_action "NONE")
    string(REGEX MATCH "CSR_COMPONENT_(.*)" _string ${component_namespace})
    if (NOT _string)
        message (FATAL_ERROR "Component name (${component_namespace}) must begin with CSR_COMPONENT_")
    endif()
    foreach(_currentArg ${ARGN})
        if (${_currentArg} STREQUAL "PROTECTED")
            set(_csr_macro_protected TRUE)
        elseif (${_currentArg} STREQUAL "BINARY")
            set(_csr_macro_binary TRUE)
        elseif ("${_currentArg}" STREQUAL "DEPENDS")
            set(_csr_macro_action "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DEPENDS")
            list(APPEND _csr_macro_depends "${_currentArg}")
        endif()
    endforeach()

    list (FIND CSR_COMPONENTS ${component_namespace} _index)
    if (${_index} EQUAL -1)
        csr_debug_output(" * ${component_namespace}\n"
                         "     Dependencies: ${_csr_macro_depends}\n"
                         "     Protected   : ${_csr_macro_protected}\n"
                         "     Binary only : ${_csr_macro_binary}\n")

        set(${component_namespace} TRUE)
        set(${component_namespace}_TECHNOLOGY ${CSR_CURRENT_TECHNOLOGY})
        set(${component_namespace}_DEPENDS ${_csr_macro_depends})
        set(${component_namespace}_PROTECTED ${_csr_macro_protected})
        set(${component_namespace}_BINARY_ONLY ${_csr_macro_binary})
        set(${component_namespace}_INSTALL_TYPE "none")
        list (APPEND CSR_COMPONENTS ${component_namespace})
        list (SORT CSR_COMPONENTS)
    endif()
endmacro(csr_define_component)

macro(csr_validate_components)
    set (_csr_config_errors FALSE)
    foreach (_csr_config_component ${CSR_COMPONENTS})
        if (${_csr_config_component}_DEPENDS)
            foreach (_csr_config_depends ${${_csr_config_component}_DEPENDS})
                list (FIND CSR_COMPONENTS ${_csr_config_depends} _index)
                if (${_index} LESS 0)
                    message (WARNING "Component ${_csr_config_component} depends on ${${_csr_config_component}_DEPENDS} which is not defined")
                    set (_csr_config_errors TRUE)
                endif()
            endforeach()
        endif()
    endforeach()
    if (${_csr_config_errors})
        message (FATAL_ERROR "One or more component dependencies were not correct")
    endif()
    unset (_csr_config_errors)
endmacro(csr_validate_components)

macro(csr_define_group group description)
    set(_csr_macro_action "NONE")
    set(_csr_macro_default "NONE_SELECTED")
    set(_csr_macro_options)
    set(_csr_macro_selection)
    set(_csr_macro_signature "csr_define_group(<name> <description>\n"
                             "                 [OPTION <name> [DEFAULT] [PLATFORM_DEFAULT <name>]]))")

    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "DEFAULT")
            if (NOT _csr_macro_selection)
                message(FATAL_ERROR "Parameter DEFAULT must be present after an option definition. \n"
                                    ${_csr_macro_signature})
            elseif (NOT _csr_macro_default STREQUAL "NONE_SELECTED")
                message(FATAL_ERROR "Only one selection can be default. \n"
                                    ${_csr_macro_signature})
            endif()
            set(_csr_macro_default "${_csr_macro_selection_value}")
        elseif ("${_currentArg}" STREQUAL "DEFAULT" OR
                "${_currentArg}" STREQUAL "PLATFORM_DEFAULT" OR
                "${_currentArg}" STREQUAL "OPTION" )
            set(_csr_macro_action "${_currentArg}")
        elseif ("${_csr_macro_action}" STREQUAL "OPTION")
            string(TOUPPER "${_currentArg}" _csr_macro_selection)
            set_property(GLOBAL PROPERTY ${group}_${_csr_macro_selection}_PLATFORM_DEFAULT "${_currentArg}")
            list(APPEND _csr_macro_options "${_currentArg}")
            set(_csr_macro_selection_value "${_currentArg}")
        elseif ("${_csr_macro_action}" STREQUAL "PLATFORM_DEFAULT")
            if (NOT _csr_macro_selection)
                message(FATAL_ERROR "Parameter PLATFORM_DEFAULT must be present after an option definition. \n"
                                    ${_csr_macro_signature})
            endif()
            set_property(GLOBAL APPEND PROPERTY ${group}_${_currentArg} "${_csr_macro_selection_value}")
        else ()
            message(FATAL_ERROR "Parameter incorrect (${_currentArg}). \n"
                                ${_csr_macro_signature})
        endif()
    endforeach()

    get_property(_csr_macro_group_tmp GLOBAL PROPERTY ${group})
    get_property(_csr_macro_groups GLOBAL PROPERTY CSR_GROUPS)
    if (${_csr_macro_group_tmp})
        message (FATAL_ERROR "Group '${group}' has already been defined")
    endif()
    list(APPEND _csr_macro_groups "${group}")

    set_property(GLOBAL PROPERTY CSR_GROUPS ${_csr_macro_groups})
    set_property(GLOBAL PROPERTY ${group} ${_csr_macro_default})
    set_property(GLOBAL PROPERTY ${group}_DESCRIPTION ${description})
    set_property(GLOBAL PROPERTY ${group}_SELECTIONS ${_csr_macro_options})
    set_property(GLOBAL PROPERTY ${group}_SELECTIONS_AVAILABLE "")
endmacro()

macro(csr_purge_code file file_purged)
    if(DEFINED CSR_PRODUCT_FILE)
        set (purge_defines)
        csr_find_technology(${file} _tech)
        if (NOT _tech)
            message (FATAL_ERROR "Could not determine tech for ${file}")
        endif()
        string(TOLOWER ${_tech} _tech_lc)
        get_filename_component(_name "${file}" NAME)
        get_filename_component(_dir "${file}" PATH)
        file(RELATIVE_PATH _relative_dir "${CSR_${_tech}_ROOT}" "${_dir}")
        set (_binary_dir "${PROJECT_BINARY_DIR}/${_tech_lc}/${_relative_dir}/PURGE")
        if (_relative_dir AND NOT IS_DIRECTORY ${_binary_dir})
            file(MAKE_DIRECTORY ${_binary_dir})
        endif()
        foreach(_define ${ARGN})
            list (APPEND purge_defines "-U${_define}")
        endforeach()
        set (output_file "${_binary_dir}/${_name}")
        file(COPY ${file} DESTINATION ${_binary_dir} NO_SOURCE_PERMISSIONS)
        execute_process(COMMAND ${PERL_EXECUTABLE} ${CSR_TOOLS_ROOT}/partially_preprocess/partially_preprocess.pl ${purge_defines} ${file}
                        OUTPUT_FILE ${output_file}
                        RESULT_VARIABLE _purge_result)
        set (${file_purged} ${output_file})
    endif()
endmacro(csr_purge_code)

macro(csr_add_library lib)
    set(_csr_macro_install_binary FALSE)
    set(_csr_macro_sources)
    set(_csr_macro_headers)
    set(_csr_macro_sources_selected)
    set(_csr_macro_headers_selected)
    set(_csr_macro_files)
    set(_csr_macro_include_dirs)
    set(_csr_macro_depends)
    set(_csr_macro_condition)
    set(_csr_macro_platform_list)
    set(_csr_macro_action "NONE")
    set(_csr_macro_sources_found FALSE)
    set(_csr_macro_libraries)
    set(_csr_macro_component)
    set(_csr_macro_component_list)
    set(_csr_macro_purge_defines)
    set(_csr_macro_condition_previous FALSE)
    set(_csr_macro_condition_found FALSE)
    set(_csr_macro_condition_result FALSE)
    set(_csr_macro_allow_warnings FALSE)
    set(_csr_macro_allow_non_ansi FALSE)
    set(_csr_macro_exclude_from_all FALSE)
    set(_csr_macro_signature
            "csr_add_library(<name>\n"
            "                COMPONENT <name>\n"
            "                [[CONDITIONAL <condition>] [PURGE_DEFINES <defines>] SOURCES file1 file2 ... fileN]\n"
            "                [[CONDITIONAL <condition>] [PURGE_DEFINES <defines>] HEADERS file1 file2 ... fileN]\n"
            "                [[CONDITIONAL <condition>] [PURGE_DEFINES <defines>] PUBLIC_HEADERS file1 file2 ... fileN]\n"
            "                [[CONDITIONAL <condition>] LIBRARIES lib1 lib2 ... libN]\n"
            "                [PLATFORM platform1 platform2 ... platformN]\n"
            "                [DEPENDS obj1 obj2 ... objN]\n"
            "                [MODULE]\n"
            "                [ALLOW_WARNINGS]\n"
            "                [ALLOW_NON_ANSI]\n"
        "                [EXCLUDE_FROM_ALL]")


    # If this is an imported target (binary) we don't have to do anything
    get_target_property(_imported ${lib} IMPORTED)
    if (${_imported})
        message (STATUS "${lib} is imported (binary)")
        return()
    endif()

    if (${CSR_BUILD_SYSTEM_DEBUG})
        message(STATUS "Adding ${CMAKE_CURRENT_SOURCE_DIR}::${lib} (library)")
    endif()

    foreach(_currentArg ${ARGN})
        if (${_csr_macro_action} STREQUAL "CONDITIONAL")
            if ("_${_currentArg}" STREQUAL "_SOURCES" OR
                "_${_currentArg}" STREQUAL "_HEADERS" OR
                "_${_currentArg}" STREQUAL "_PUBLIC_HEADERS" OR
                "_${_currentArg}" STREQUAL "_PURGE_DEFINES" OR
                "_${_currentArg}" STREQUAL "_LIBRARIES")
                set (_csr_macro_action "${_currentArg}")
                csr_evaluate_condition(_csr_macro_condition_result "${_csr_macro_condition}")
                set(_csr_macro_condition_previous TRUE)
                set(_csr_macro_condition)
            else()
                list(APPEND _csr_macro_condition "${_currentArg}")
            endif()
        elseif (${_csr_macro_action} STREQUAL "PURGE_DEFINES")
            if ("_${_currentArg}" STREQUAL "_SOURCES" OR
                "_${_currentArg}" STREQUAL "_HEADERS" OR
                "_${_currentArg}" STREQUAL "_PUBLIC_HEADERS")
                set(_csr_macro_action "${_currentArg}")
                if (NOT _csr_macro_condition_previous)
                    set(_csr_macro_condition_found FALSE)
                    set(_csr_macro_condition_result FALSE)
                endif()
                set(_csr_macro_condition_previous FALSE)
            else()
                list(APPEND _csr_macro_purge_defines "${_currentArg}")
            endif()
        elseif ("_${_currentArg}" STREQUAL "_EXISTS" OR
                "_${_currentArg}" STREQUAL "_AND" OR
                "_${_currentArg}" STREQUAL "_OR")
            message(FATAL_ERROR "Parameter incorrect. Reserved keyword '${_currentArg}' used outside conditional statement\n"
                ${_csr_macro_signature})
        elseif ("${_currentArg}" STREQUAL "MODULE")
            set(_csr_macro_library_type "${_currentArg}")
        elseif ("${_currentArg}" STREQUAL "SOURCES" OR
                "${_currentArg}" STREQUAL "HEADERS" OR
                "${_currentArg}" STREQUAL "PUBLIC_HEADERS" OR
                "${_currentArg}" STREQUAL "DEPENDS" OR
                "${_currentArg}" STREQUAL "PLATFORM" OR
                "${_currentArg}" STREQUAL "PURGE_DEFINES" OR
                "${_currentArg}" STREQUAL "LIBRARIES" OR
                "${_currentArg}" STREQUAL "COMPONENT")
            set(_csr_macro_action "${_currentArg}")
            set(_csr_macro_purge_defines)
            set(_csr_macro_condition_found FALSE)
            set(_csr_macro_condition_result FALSE)
        elseif ("${_currentArg}" STREQUAL "CONDITIONAL")
            set(_csr_macro_action "${_currentArg}")
            set(_csr_macro_purge_defines)
            set(_csr_macro_condition_found TRUE)
            set(_csr_macro_condition_result FALSE)
        elseif ("${_currentArg}" STREQUAL "ALLOW_WARNINGS")
            set(_csr_macro_allow_warnings TRUE)
        elseif ("${_currentArg}" STREQUAL "ALLOW_NON_ANSI")
            set(_csr_macro_allow_non_ansi TRUE)
        elseif ("${_currentArg}" STREQUAL "EXCLUDE_FROM_ALL")
            set(_csr_macro_exclude_from_all TRUE)
    elseif (${_csr_macro_action} STREQUAL "COMPONENT")
            set(_csr_macro_component "${_currentArg}")
            csr_validate_component(${_csr_macro_component} _selected)
            if (DEFINED ${_csr_macro_component})
                list(APPEND _csr_macro_component_list "${_currentArg}")
                if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "none")
                    if (${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin" OR
                        ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "all")
                        set(_csr_macro_install_binary TRUE)
                    endif()
                    if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin")
                        csr_add_artifact_location()
                    endif()
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "SOURCES")
            if (DEFINED ${_csr_macro_component})
                get_filename_component(_csr_macro_source "${_currentArg}" ABSOLUTE)
                if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                    list(APPEND _csr_macro_sources "${_csr_macro_source}")
                endif()
                if (_csr_macro_purge_defines)
                    csr_purge_code(${_csr_macro_source} _csr_macro_source ${_csr_macro_purge_defines})
                endif()
                csr_install_files(COMPONENT ${_csr_macro_component} "${_csr_macro_source}" INSTALL_TYPE "src")
                if (CSR_DUMP_FILES_INTO_SINGLE_DIR AND _selected)
                    list(APPEND _csr_macro_sources_selected "${_csr_macro_source}")
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "HEADERS")
            if (DEFINED ${_csr_macro_component})
                if (NOT "${_currentArg}" STREQUAL "ALL")
                    get_filename_component(_csr_macro_header "${_currentArg}" ABSOLUTE)
                    if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                        list(APPEND _csr_macro_headers "${_csr_macro_header}")
                    endif()
                    if (_csr_macro_purge_defines)
                        csr_purge_code(${_csr_macro_header} _csr_macro_header ${_csr_macro_purge_defines})
                    endif()
                    csr_install_files(COMPONENT ${_csr_macro_component} "${_csr_macro_header}" INSTALL_TYPE "src")
                    if (CSR_DUMP_FILES_INTO_SINGLE_DIR AND _selected)
                        list(APPEND _csr_macro_headers_selected "${_csr_macro_header}")
                    endif()
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "PUBLIC_HEADERS")
            if (DEFINED ${_csr_macro_component})
                get_filename_component(_csr_macro_header "${_currentArg}" ABSOLUTE)
                if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                    list(APPEND _csr_macro_headers "${_currentArg}")
                endif()
                if (_csr_macro_purge_defines)
                    csr_purge_code(${_csr_macro_header} _csr_macro_header ${_csr_macro_purge_defines})
                endif()
                csr_add_headers(COMPONENT ${_csr_macro_component} "${_csr_macro_header}")
            endif()
        elseif (${_csr_macro_action} STREQUAL "DEPENDS")
            list(APPEND _csr_macro_depends "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "PLATFORM")
            list(APPEND _csr_macro_platform_list "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "LIBRARIES")
            if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                if (${_currentArg} STREQUAL "SYSTEM")
                    list(APPEND _csr_macro_libraries "${CSR_SYSTEM_LIBS}")
                else()
                    list(APPEND _csr_macro_libraries "${_currentArg}")
                endif()
            endif()
        else ()
            message(FATAL_ERROR "Parameter incorrect: ${_currentArg}\n"
                    ${_csr_macro_signature})
        endif()
    endforeach()

    if (_csr_macro_sources)
        list (REMOVE_DUPLICATES _csr_macro_sources)
        list (SORT _csr_macro_sources)
    endif()
    if (_csr_macro_headers)
        list (REMOVE_DUPLICATES _csr_macro_headers)
        list (SORT _csr_macro_headers)
    endif()

    set (_csr_macro_should_build ${CSR_PERFORM_BUILD})
    if (_csr_macro_should_build)
        set (_csr_macro_should_build FALSE)
        if (_csr_macro_platform_list)
            foreach (_csr_macro_platform ${_csr_macro_platform_list})
                if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                    set (_csr_macro_should_build ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
                endif()
            endforeach()
        elseif (CSR_INTERNAL_PLATFORM)
            foreach (_csr_macro_platform ${CSR_INTERNAL_PLATFORM})
                if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                    set (_csr_macro_should_build ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
                endif()
            endforeach()
        else()
            set (_csr_macro_should_build ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
        endif()
    endif()

    csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "      - Library: ${lib}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Arguments      : ${ARGN}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Should be built: ${_csr_macro_should_build}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Components     : ${_csr_macro_component_list}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Sources        : ${_csr_macro_sources}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Headers        : ${_csr_macro_headers}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Files          : ${_csr_macro_files}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Libraries      : ${_csr_macro_libraries}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Platform       : ${CSR_PLATFORM}\n")

    if (NOT _csr_macro_sources AND NOT _csr_macro_condition_found)
        if (${_csr_macro_should_build})
            set (_csr_macro_library_include_dirs)
            set (_csr_macro_library_sources)
            foreach (_csr_macro_library ${_csr_macro_libraries})
                if (TARGET ${_csr_macro_library})
                    set (_csr_macro_compile_flags)
                    set (lib_sources)
                    set (lib_include_dirs)
                    get_property(lib_sources GLOBAL PROPERTY ${_csr_macro_library}_SOURCES)
                    get_property(lib_include_dirs GLOBAL PROPERTY ${_csr_macro_library}_INCLUDE_DIRS)
                    if (NOT lib_sources)
                        message (FATAL_ERROR "Could not lookup property ${_csr_macro_library}_SOURCES")
                    endif()
                    get_target_property(_csr_macro_compile_flags ${_csr_macro_library} COMPILE_FLAGS)
                    if (_csr_macro_compile_flags)
                        set_source_files_properties(${lib_sources} PROPERTIES COMPILE_FLAGS "${_csr_macro_compile_flags}")
                    endif()
                    list (APPEND _csr_macro_library_sources ${lib_sources})
                    list (APPEND _csr_macro_library_include_dirs ${lib_include_dirs})
                    foreach (_csr_macro_component ${_csr_macro_component_list})
                        set_property(GLOBAL APPEND PROPERTY ${_csr_macro_component}_LIBRARIES ${lib})
                    endforeach()
                endif()
            endforeach()
            if (_csr_macro_library_sources)
                include_directories(${_csr_macro_library_include_dirs})
                # Include public include dirs again to ensure that Synergy include
                # dirs are added (prepended) before legacy dirs (backwards compatibility)
                include_directories(${CSR_INC_GLOBAL})
                if (${_csr_macro_exclude_from_all})
                  add_library(${lib} EXCLUDE_FROM_ALL ${_csr_macro_library_type} ${_csr_macro_library_sources})
                else()
                  add_library(${lib} ${_csr_macro_library_type} ${_csr_macro_library_sources})
                endif()
                if (${_csr_macro_install_binary})
                    set_property(GLOBAL PROPERTY CSR_${CSR_CURRENT_TECHNOLOGY}_EXPORT_LIB "csr_exports_lib")
                    install(TARGETS ${lib} EXPORT csr_exports_lib DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MAJOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MINOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_FIXANDBUILD}/lib)
                    foreach (_csr_macro_component ${_csr_macro_component_list})
                        file (APPEND ${CSR_${CSR_CURRENT_TECHNOLOGY}_MAPPING_LIBRARY_FILE} "csr_add_binary_library(${_csr_macro_component} ${lib})\n")
                    endforeach()
                endif()
            endif()
        endif ()
    elseif (_csr_macro_sources)
        if (${_csr_macro_should_build})
            if (CSR_DUMP_FILES_INTO_SINGLE_DIR AND NOT CSR_INTERNAL_PLATFORM)
                foreach (_file ${_csr_macro_sources_selected} ${_csr_macro_headers_selected})
                    configure_file(${_file} ${CSR_SRC_GLOBAL} COPYONLY)
                endforeach()
            endif()
            get_directory_property(_csr_macro_include_dirs INCLUDE_DIRECTORIES)
            if (${_csr_macro_exclude_from_all})
              add_library(${lib} EXCLUDE_FROM_ALL ${_csr_macro_library_type} ${_csr_macro_sources} ${_csr_macro_headers})
            else()
              add_library(${lib} ${_csr_macro_library_type} ${_csr_macro_sources} ${_csr_macro_headers})
            endif()

            # Add custom codesize target per lib target
            if (PERL_EXECUTABLE)
                get_target_property(_csr_macro_lib_location ${lib} LOCATION)
                get_filename_component(_csr_macro_lib_name ${_csr_macro_lib_location} NAME)
                get_filename_component(_csr_macro_lib_path ${_csr_macro_lib_location} PATH)
                if (CSR_CODESIZE_LIB_OPTIONS)
                    string(REPLACE " " ";" _csr_macro_codesize_parameters ${CSR_CODESIZE_LIB_OPTIONS})
                endif()
                add_custom_target("${lib}-codesize"
                                  "${PERL_EXECUTABLE}" "${CSR_TOOLS_ROOT}/codesize/codesize.pl"
                                  --libpaths ${_csr_macro_lib_path}
                                  --libs ${_csr_macro_lib_name}
                                  ${_csr_macro_codesize_parameters}
                                  DEPENDS ${lib})
            endif()

            set_property(GLOBAL PROPERTY "${lib}_SOURCES" "${_csr_macro_sources}")
            set_property(GLOBAL PROPERTY "${lib}_INCLUDE_DIRS" "${_csr_macro_include_dirs}")
            get_target_property (_csr_macro_compile_flags ${lib} COMPILE_FLAGS)
            if (NOT ${_csr_macro_compile_flags})
                set (_csr_macro_compile_flags)
            endif()
            if (CSR_BUILD_NOWARNINGS AND NOT ${CSR_ALLOW_WARNINGS} AND NOT ${_csr_macro_allow_warnings})
                set (_csr_macro_compile_flags "${_csr_macro_compile_flags} ${CSR_BUILD_NOWARNINGS}")
            endif()
            if (CSR_BUILD_FORCEANSI AND NOT ${CSR_ALLOW_NON_ANSI} AND NOT ${_csr_macro_allow_non_ansi})
                set (_csr_macro_compile_flags "${_csr_macro_compile_flags} ${CSR_BUILD_FORCEANSI}")
            endif()
            if (CSR_PROFILING_SUPPORT)
                set (_csr_macro_compile_flags "${_csr_macro_compile_flags} ${CSR_BUILD_PROFILING_COMPILE_FLAGS}")
            endif()
            if (_csr_macro_compile_flags)
                set_target_properties(${lib} PROPERTIES COMPILE_FLAGS "${_csr_macro_compile_flags}")
                csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Flags          : ${_csr_macro_compile_flags}\n")
            endif()
            if (_csr_macro_depends)
                foreach (_csr_macro_depend ${_csr_macro_depends})
                    add_dependencies(${lib} ${_csr_macro_depend})
                endforeach()
                csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Depends        : ${_csr_macro_depends}\n")
            endif()
            if (${_csr_macro_install_binary})
                if (_csr_macro_library_type STREQUAL "MODULE")
                    install(TARGETS ${lib} DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MAJOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MINOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_FIXANDBUILD}/plugin)
                else()
                    set_property(GLOBAL PROPERTY CSR_${CSR_CURRENT_TECHNOLOGY}_EXPORT_LIB "csr_exports_lib")
                    install(TARGETS ${lib} EXPORT csr_exports_lib DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MAJOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MINOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_FIXANDBUILD}/lib)
                    foreach (_csr_macro_component ${_csr_macro_component_list})
                        file (APPEND ${CSR_${CSR_CURRENT_TECHNOLOGY}_MAPPING_LIBRARY_FILE} "csr_add_binary_library(${_csr_macro_component} ${lib})\n")
                    endforeach()
                endif()
            endif()
            if (_csr_macro_library_type)
                if (${_csr_macro_library_type} STREQUAL "MODULE")
                    if (CSR_BUILD_LINK_START_GROUP)
                        set(_csr_macro_libraries_resolved ${CSR_BUILD_LINK_START_GROUP})
                    endif()
                    list(APPEND _csr_macro_libraries_resolved ${_csr_macro_libraries})
                    if (CSR_BUILD_LINK_END_GROUP)
                        list(APPEND _csr_macro_libraries_resolved ${CSR_BUILD_LINK_END_GROUP})
                    endif()
                    csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Libraries resol: ${_csr_macro_libraries_resolved}\n")
                    target_link_libraries(${lib} ${_csr_macro_libraries_resolved})
                endif()
            else()
                foreach (_csr_macro_component ${_csr_macro_component_list})
                    set_property(GLOBAL APPEND PROPERTY ${_csr_macro_component}_LIBRARIES ${lib})
                endforeach()
            endif()
        endif()
    endif()
endmacro(csr_add_library)

macro(csr_add_binary_library component_namespace lib)
    if (${CSR_BUILD_SYSTEM_DEBUG})
        message (STATUS "Importing binary library ${lib}")
    endif()
    csr_validate_component(${component_namespace} _selected)
    if(DEFINED ${component_namespace})
        set_property(GLOBAL APPEND PROPERTY ${component_namespace}_LIBRARIES ${lib})
    endif()
endmacro(csr_add_binary_library)

macro(csr_add_dissector_library lib)
    if (WIRESHARK_AVAILABLE AND NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
        include_directories(${WIRESHARK_DISSECTOR_INCLUDES} ${GLIB2_INCLUDE_DIRS})
        add_definitions("-D_NEED_VAR_IMPORT_ -DHAVE_CONFIG_H -D_U_=\"\"")
        if (MSVC_VERSION)
            add_definitions("-DMSC_VER_REQUIRED=${MSVC_VERSION}")
        endif()
        set (_csr_macro_libraries ${GLIB2_LIBRARIES} ${WIRESHARK_DISSECTOR_LIBRARIES})
        csr_add_library(${lib} MODULE ${ARGN} LIBRARIES ${_csr_macro_libraries})
        if (TARGET ${lib})
            set_target_properties(${lib} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/plugin)
            get_target_property(_csr_macro_lib_type ${lib} TYPE)
            if (${_csr_macro_lib_type} STREQUAL "MODULE_LIBRARY")
                get_target_property(_csr_macro_lib_location ${lib} LOCATION)
                file (APPEND ${CSR_${CSR_CURRENT_TECHNOLOGY}_DISSECTOR_FILE} "list (APPEND CSR_${CSR_CURRENT_TECHNOLOGY}_DISSECTOR_SHARED_LIBRARIES \"${_csr_macro_lib_location}\")\n")
                file (APPEND ${CSR_${CSR_CURRENT_TECHNOLOGY}_DISSECTOR_FILE} "list (APPEND CSR_${CSR_CURRENT_TECHNOLOGY}_DISSECTOR_TARGETS ${lib})\n")
            endif()
        endif()
    endif()
endmacro()

macro(csr_get_libraries libraries)
    set (${libraries} ${ARGN})
endmacro(csr_get_libraries)

macro(csr_add_executable name)
    set(_csr_macro_install_binary FALSE)
    set(_csr_macro_sources)
    set(_csr_macro_headers)
    set(_csr_macro_files)
    set(_csr_macro_depends)
    set(_csr_macro_libraries)
    set(_csr_macro_libraries_system)
    set(_csr_macro_destination)
    set(_csr_macro_condition)
    set(_csr_macro_platform_list)
    set(_csr_macro_optional_files)
    set(_csr_macro_optional_directories)
    set(_csr_macro_test FALSE)
    set(_csr_macro_action "NONE")
    set(_csr_macro_component)
    set(_csr_macro_purge_defines)
    set(_csr_macro_condition_previous FALSE)
    set(_csr_macro_condition_found FALSE)
    set(_csr_macro_condition_result FALSE)
    set(_csr_macro_allow_warnings FALSE)
    set(_csr_macro_allow_non_ansi FALSE)
    set(_csr_macro_exclude_from_all FALSE)
    set(_csr_macro_signature
            "csr_add_executable(<name>\n"
            "                   COMPONENT <name>\n"
            "                   [[CONDITIONAL <condition>] [PURGE_DEFINES <defines>] SOURCES file1 file2 ... fileN]\n"
            "                   [[CONDITIONAL <condition>] [PURGE_DEFINES <defines>] HEADERS file1 file2 ... fileN]\n"
            "                   [[CONDITIONAL <condition>] LIBRARIES lib1 lib2 ... libN]\n"
            "                   [OPTIONAL_DIRECTORIES dir1 dir2 ... dirN]\n"
            "                   [OPTIONAL_FILES file1 file2 ... fileN]\n"
            "                   [PLATFORM plat1 plat2 ... platN]\n"
            "                   [DEPENDS obj1 obj2 ... objN]\n"
            "                   [DESTINATION <directory>]\n"
            "                   [ALLOW_WARNINGS]\n"
            "                   [ALLOW_NON_ANSI]\n"
        "                   [EXCLUDE_FROM_ALL]")

    if (${CSR_BUILD_SYSTEM_DEBUG})
        message(STATUS "Adding ${CMAKE_CURRENT_SOURCE_DIR}::${name} (executable)")
    endif()

    foreach(_currentArg ${ARGN})
        if (${_csr_macro_action} STREQUAL "CONDITIONAL")
            if ("_${_currentArg}" STREQUAL "_SOURCES" OR
                "_${_currentArg}" STREQUAL "_HEADERS" OR
                "_${_currentArg}" STREQUAL "_PURGE_DEFINES" OR
                "_${_currentArg}" STREQUAL "_LIBRARIES")
                set (_csr_macro_action "${_currentArg}")
                csr_evaluate_condition(_csr_macro_condition_result "${_csr_macro_condition}")
                set(_csr_macro_condition_previous TRUE)
                set(_csr_macro_condition)
            else()
                list(APPEND _csr_macro_condition "${_currentArg}")
            endif()
        elseif (${_csr_macro_action} STREQUAL "PURGE_DEFINES")
            if ("_${_currentArg}" STREQUAL "_SOURCES" OR
                "_${_currentArg}" STREQUAL "_HEADERS")
                set(_csr_macro_action "${_currentArg}")
                if (NOT _csr_macro_condition_previous)
                    set(_csr_macro_condition_found FALSE)
                    set(_csr_macro_condition_result FALSE)
                endif()
                set(_csr_macro_condition_previous FALSE)
            else()
                list(APPEND _csr_macro_purge_defines "${_currentArg}")
            endif()
        elseif ("_${_currentArg}" STREQUAL "_EXISTS" OR
                "_${_currentArg}" STREQUAL "_AND" OR
                "_${_currentArg}" STREQUAL "_OR")
            message(FATAL_ERROR "Parameter incorrect. Reserved keyword '${_currentArg}' used outside conditional statement \n"
                                ${_csr_macro_signature})
        elseif ("${_currentArg}" STREQUAL "TEST")
            set(_csr_macro_test TRUE)
        elseif ("${_currentArg}" STREQUAL "SOURCES" OR
                "${_currentArg}" STREQUAL "HEADERS" OR
                "${_currentArg}" STREQUAL "PLATFORM" OR
                "${_currentArg}" STREQUAL "PURGE_DEFINES" OR
                "${_currentArg}" STREQUAL "LIBRARIES" OR
                "${_currentArg}" STREQUAL "OPTIONAL_FILES" OR
                "${_currentArg}" STREQUAL "COMPONENT" OR
                "${_currentArg}" STREQUAL "OPTIONAL_DIRECTORIES" OR
                "${_currentArg}" STREQUAL "DEPENDS" OR
                "${_currentArg}" STREQUAL "DESTINATION")
            set(_csr_macro_action "${_currentArg}")
            set(_csr_macro_purge_defines)
            set(_csr_macro_condition_found FALSE)
            set(_csr_macro_condition_result FALSE)
        elseif ("${_currentArg}" STREQUAL "CONDITIONAL")
            set(_csr_macro_action "${_currentArg}")
            set(_csr_macro_purge_defines)
            set(_csr_macro_condition_found TRUE)
            set(_csr_macro_condition_result FALSE)
        elseif ("${_currentArg}" STREQUAL "ALLOW_WARNINGS")
            set(_csr_macro_allow_warnings TRUE)
        elseif ("${_currentArg}" STREQUAL "ALLOW_NON_ANSI")
            set(_csr_macro_allow_non_ansi TRUE)
        elseif ("${_currentArg}" STREQUAL "EXCLUDE_FROM_ALL")
            set(_csr_macro_exclude_from_all TRUE)
        elseif (${_csr_macro_action} STREQUAL "COMPONENT")
            set(_csr_macro_component "${_currentArg}")
            csr_validate_component(${_csr_macro_component} _selected)
            if (DEFINED ${_csr_macro_component})
                list(APPEND _csr_macro_component_list "${_currentArg}")
                if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "none")
                    if (${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin" OR
                        ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "all")
                        set(_csr_macro_install_binary TRUE)
                    endif()
                    if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin")
                        csr_add_artifact_location()
                    endif()
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "SOURCES")
            if (DEFINED ${_csr_macro_component})
                get_filename_component(_csr_macro_source "${_currentArg}" ABSOLUTE)
                if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                    list(APPEND _csr_macro_sources "${_csr_macro_source}")
                endif()
                if (_csr_macro_purge_defines)
                    csr_purge_code(${_csr_macro_source} _csr_macro_source ${_csr_macro_purge_defines})
                endif()
                csr_install_files(COMPONENT ${_csr_macro_component} "${_csr_macro_source}" INSTALL_TYPE "src")
            endif()
        elseif (${_csr_macro_action} STREQUAL "HEADERS")
            if (DEFINED ${_csr_macro_component})
                if (NOT "${_currentArg}" STREQUAL "ALL")
                    get_filename_component(_csr_macro_header "${_currentArg}" ABSOLUTE)
                    if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                        list(APPEND _csr_macro_headers "${_csr_macro_header}")
                    endif()
                    if (_csr_macro_purge_defines)
                        csr_purge_code(${_csr_macro_header} _csr_macro_header ${_csr_macro_purge_defines})
                    endif()
                    csr_install_files(COMPONENT ${_csr_macro_component} "${_csr_macro_header}" INSTALL_TYPE "src")
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "PLATFORM")
            list(APPEND _csr_macro_platform_list "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "LIBRARIES")
            if (NOT _csr_macro_condition_found OR _csr_macro_condition_result)
                if (${_currentArg} STREQUAL "SYSTEM")
                    list(APPEND _csr_macro_libraries_system "${CSR_SYSTEM_LIBS}")
                else()
                    list(APPEND _csr_macro_libraries "${_currentArg}")
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "OPTIONAL_FILES")
            list(APPEND _csr_macro_optional_files "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "OPTIONAL_DIRECTORIES")
            list(APPEND _csr_macro_optional_directories "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DEPENDS")
            list(APPEND _csr_macro_depends "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DESTINATION")
            set(_csr_macro_destination "${_currentArg}")
        else ()
            message(FATAL_ERROR "Parameter ${_currentArg} is incorrect\n"
                                ${_csr_macro_signature})
        endif()
    endforeach()

    if (_csr_macro_sources)
        list (REMOVE_DUPLICATES _csr_macro_sources)
        list (SORT _csr_macro_sources)
    endif()
    if (_csr_macro_headers)
        list (REMOVE_DUPLICATES _csr_macro_headers)
        list (SORT _csr_macro_headers)
    endif()

    csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "      - Executable: ${name}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Arguments      : ${ARGN}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Components     : ${_csr_macro_component_list}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Sources        : ${_csr_macro_sources}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Headers        : ${_csr_macro_headers}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Files          : ${_csr_macro_files}\n"
                     ${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Platform       : ${CSR_PLATFORM}\n")

    list (LENGTH _csr_macro_sources _csr_macro_sources_count)
    if(${_csr_macro_sources_count} GREATER 0 AND ${CSR_LINKING_WORKS})
        set (_csr_macro_should_build ${CSR_PERFORM_BUILD})
        if (_csr_macro_should_build)
            set (_csr_macro_should_build FALSE)
            if (_csr_macro_platform_list)
                foreach (_csr_macro_platform ${_csr_macro_platform_list})
                    if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                        set (_csr_macro_should_build ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
                    endif()
                endforeach()
            elseif (CSR_INTERNAL_PLATFORM)
                foreach (_csr_macro_platform ${CSR_INTERNAL_PLATFORM})
                    if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                        set (_csr_macro_should_build ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
                    endif()
                endforeach()
            else()
                set (_csr_macro_should_build ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
            endif()
        endif()
        csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Should be built: ${_csr_macro_should_build}\n")
        if (${_csr_macro_should_build})
            if (${_csr_macro_exclude_from_all})
              add_executable(${name} EXCLUDE_FROM_ALL ${_csr_macro_sources} ${_csr_macro_headers})
        else()
              add_executable(${name} ${_csr_macro_sources} ${_csr_macro_headers})
        endif()
            get_target_property (_csr_macro_compile_flags ${name} COMPILE_FLAGS)
            if (NOT ${_csr_macro_compile_flags})
                set (_csr_macro_compile_flags)
            endif()
            if (NOT ${CSR_ALLOW_WARNINGS} AND NOT ${_csr_macro_allow_warnings})
                set (_csr_macro_compile_flags "${_csr_macro_compile_flags} ${CSR_BUILD_NOWARNINGS}")
            endif()
            if (NOT ${CSR_ALLOW_NON_ANSI} AND NOT ${_csr_macro_allow_non_ansi})
                set (_csr_macro_compile_flags "${_csr_macro_compile_flags} ${CSR_BUILD_FORCEANSI}")
            endif()
            if (${CSR_PROFILING_SUPPORT})
                set (_csr_macro_compile_flags "${_csr_macro_compile_flags} ${CSR_BUILD_PROFILING_COMPILE_FLAGS}")
            endif()
            if (_csr_macro_compile_flags)
                set_target_properties(${name} PROPERTIES COMPILE_FLAGS "${_csr_macro_compile_flags}")
                csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          FLAGS          : ${_csr_macro_compile_flags}\n")
            endif()
            if (_csr_macro_depends)
                foreach (_csr_macro_depend ${_csr_macro_depends})
                    add_dependencies(${name} ${_csr_macro_depend})
                endforeach()
                csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Depends        : ${_csr_macro_depends}\n")
            endif()
            if (_csr_macro_destination)
                set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${_csr_macro_destination})
            else()
                get_target_property(_csr_macro_dir ${name} RUNTIME_OUTPUT_DIRECTORY)
                string(REGEX MATCH "CSR_COMPONENT_(.*)" _string ${_csr_macro_component})
                if(_string)
                    string(TOLOWER ${CMAKE_MATCH_1} _csr_macro_dir1)
                    string(REGEX REPLACE "[_]+" "/" _csr_macro_dir2 ${_csr_macro_dir1})
                    set_target_properties(${name} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${_csr_macro_dir}/${_csr_macro_dir2}")
                else()
                    message(FATAL_ERROR "Component namespace is incorrect. Namespace should begin with CSR_COMPONENT_ (${component_namespace})")
                endif()
            endif()
            get_target_property(_csr_macro_dir ${name} RUNTIME_OUTPUT_DIRECTORY)
            csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Destination    : ${_csr_macro_dir}\n")
            set (_csr_macro_libraries_resolved)
            foreach (_csr_macro_library ${_csr_macro_libraries})
                string (REGEX MATCH "CSR_COMPONENT_(.*)" _match ${_csr_macro_library})
                if (_match)
                    csr_validate_component(${_csr_macro_library} _selected)
                    get_property(_csr_component_libraries GLOBAL PROPERTY ${_csr_macro_library}_LIBRARIES)
                    list(APPEND _csr_macro_libraries_resolved ${_csr_component_libraries})
                else()
                    list(APPEND _csr_macro_libraries_resolved ${_csr_macro_library})
                endif()
            endforeach()
            if (CSR_BUILD_LINK_START_GROUP AND CSR_BUILD_LINK_END_GROUP)
                set(_csr_macro_libraries_resolved ${CSR_BUILD_LINK_START_GROUP} ${_csr_macro_libraries_resolved} ${CSR_BUILD_LINK_END_GROUP} ${_csr_macro_libraries_system})
            else()
                set(_csr_macro_libraries_resolved ${_csr_macro_libraries_resolved} ${_csr_macro_libraries_system})
            endif()
            if (${CSR_PROFILING_SUPPORT} AND CSR_BUILD_PROFILING_LIBS)
                list(APPEND _csr_macro_libraries_resolved ${CSR_BUILD_PROFILING_LIBS})
            endif()
            csr_debug_output(${CSR_BUILD_SYSTEM_DEBUG_IDENT} "          Libraries      : ${_csr_macro_libraries_resolved}\n")
            target_link_libraries(${name} ${_csr_macro_libraries_resolved})
            set_target_properties(${name} PROPERTIES COMPONENT ${_csr_macro_component})
            csr_executable_poststep(${name} bin)
            if (${_csr_macro_test})
                get_target_property(_csr_macro_dir ${name} RUNTIME_OUTPUT_DIRECTORY)
                add_test(${name} ${_csr_macro_dir}/${name})
                add_dependencies("${CSR_CURRENT_TECHNOLOGY_LC}-module-test" ${name})
                if (${CSR_BUILD_SYSTEM_DEBUG})
                    message(STATUS "Adding ${name} to ${CSR_CURRENT_TECHNOLOGY_LC}-module-test")
                endif()
            endif()
            get_target_property (_csr_macro_executable_location ${name} LOCATION)
            foreach(_csr_macro_optional_file ${_csr_macro_optional_files})
                add_custom_command(TARGET ${name} POST_BUILD COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different ${_csr_macro_optional_file} ${_csr_macro_executable_location})
            endforeach()
            foreach(_csr_macro_optional_directory ${_csr_macro_optional_directories})
                add_custom_command(TARGET ${name} POST_BUILD COMMAND ${CMAKE_COMMAND} ARGS -E copy_directory  ${_csr_macro_optional_directory} ${_csr_macro_executable_location})
            endforeach()

            # Add custom codesize target per executable target (ARM/LINUX)
            if (PERL_EXECUTABLE)
                if (CSR_PLATFORM STREQUAL BDB3)
                    string(REGEX REPLACE ".axf" ".lst" _lst_location ${_csr_macro_executable_location})
                    get_filename_component(_lst_path ${_lst_location} PATH)
                    string(TOLOWER ${CSR_PLATFORM} _csr_platform_lc)
                    add_custom_target("${name}-codesize"
                                      "${PERL_EXECUTABLE}" "${CSR_TOOLS_ROOT}/binsize/armbinsize.pl"
                                      ${_lst_location} ${_lst_path} ${_csr_platform_lc}
                                      DEPENDS ${name})
                endif()
                if (CSR_PLATFORM MATCHES LINUX)
                    set(_objdump_file "${_csr_macro_executable_location}.objdump")
                    set(_map_file "${_csr_macro_executable_location}.map")
                    add_custom_command(TARGET ${name}
                                       POST_BUILD
                                       COMMAND objdump -x ${_csr_macro_executable_location} > ${_objdump_file})
                    get_target_property(_csr_macro_link_flags ${name} LINK_FLAGS)
                    if (_csr_macro_link_flags)
                        set(_csr_macro_link_flags "${_csr_macro_link_flags} -Wl,-Map=${_map_file}")
                    else()
                        set(_csr_macro_link_flags "-Wl,-Map=${_map_file}")
                    endif()
                    set_target_properties(${name} PROPERTIES LINK_FLAGS "${_csr_macro_link_flags}")
                    add_custom_target("${name}-codesize"
                                      "${PERL_EXECUTABLE}" "${CSR_TOOLS_ROOT}/binsize/codesize.pl"
                                      --map=${_map_file} --objdump=${_objdump_file}
                                      DEPENDS ${name})
                endif()
            endif()

            if (${_csr_macro_install_binary})
                # Copy aux files into binary directory
                install(TARGETS ${name} DESTINATION ${CSR_CURRENT_TECHNOLOGY_LC}/${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MAJOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_MINOR}.${CSR_${CSR_CURRENT_TECHNOLOGY}_VERSION_FIXANDBUILD}/bin/${_csr_macro_dir2})
                foreach(_csr_macro_optional_file ${_csr_macro_optional_files})
                    csr_install_files(COMPONENT ${_csr_macro_component} bin/${_csr_macro_dir2}/${_csr_macro_optional_file})
                endforeach()
                foreach(_csr_macro_optional_directory ${_csr_macro_optional_directories})
                    csr_install_directory(COMPONENT ${_csr_macro_component} bin/${_csr_macro_dir2}/${_csr_macro_optional_directory})
                endforeach()
            else()
                # Copy aux files into source directory
                if (${_csr_macro_optional_files})
                    csr_install_files(COMPONENT ${_csr_macro_component} ${_csr_macro_optional_files})
                endif()
                if (${_csr_macro_optional_directories})
                    csr_install_directory(COMPONENT ${_csr_macro_component} ${_csr_macro_optional_directories})
                endif()
            endif()
        endif()
    endif()
endmacro(csr_add_executable)

macro(csr_include_directories)
    set(_csr_macro_action "NONE")
    set(_csr_macro_platform_set FALSE)
    set(_csr_macro_platform_found FALSE)
    set(_csr_macro_should_include FALSE)
    set(_csr_macro_inc_dirs)
    set(_csr_macro_component)
    set(_csr_macro_condition_next FALSE)
    set(_csr_macro_condition_result FALSE)
    set(_csr_macro_signature
            "csr_include_directories([COMPONENT <name> dir1 dir2 ... dirN\n"
            "                        [CONDITIONAL <condition> DIRECTORIES dir1 dir2 ... dirN]]\n"
            "                        [PLATFORM <platform>]\n")

    foreach(_currentArg ${ARGN})
        if (${_csr_macro_condition_next})
            if ("_${_currentArg}" STREQUAL "_DIRECTORIES")
                csr_evaluate_condition(_csr_macro_condition_result "${_csr_macro_condition}")
                set(_csr_macro_condition_next FALSE)
                set(_csr_macro_condition)
            else()
                list(APPEND _csr_macro_condition "${_currentArg}")
            endif()
        elseif ("_${_currentArg}" STREQUAL "_EXISTS" OR
                "_${_currentArg}" STREQUAL "_AND" OR
                "_${_currentArg}" STREQUAL "_OR")
            message(FATAL_ERROR "Parameter incorrect. Reserved keyword '${_currentArg}' used outside conditional statement \n"
                                ${_csr_macro_signature})
        elseif ("${_currentArg}" STREQUAL "PLATFORM" OR "${_currentArg}" STREQUAL "COMPONENT")
            set(_csr_macro_action "${_currentArg}")
            set(_csr_macro_condition_result FALSE)
        elseif ("${_currentArg}" STREQUAL "CONDITIONAL")
            set(_csr_macro_action "${_currentArg}")
            set(_csr_macro_condition_result FALSE)
            set(_csr_macro_condition_next TRUE)
        elseif (${_csr_macro_action} STREQUAL "COMPONENT")
            set(_csr_macro_component "${_currentArg}")
            csr_validate_component(${_csr_macro_component} _selected)
            set(_csr_macro_action "DIRECTORIES")
        elseif (${_csr_macro_action} STREQUAL "PLATFORM")
            set (_csr_macro_platform_set TRUE)
            if ("${_currentArg}" STREQUAL ${CSR_PLATFORM})
                set(_csr_macro_platform_found TRUE)
            endif()
        elseif (${_csr_macro_action} STREQUAL "CONDITIONAL")
            if (DEFINED ${_csr_macro_component})
                if (${_csr_macro_condition_result})
                    list(APPEND _csr_macro_inc_dirs "${_currentArg}")
                endif()
            endif()
        elseif(${_csr_macro_action} STREQUAL "DIRECTORIES")
            if (NOT _csr_macro_component)
                message (FATAL_ERROR "Tag: 'COMPONENT name' must the present prior to the list of directories\n"
                                     ${_csr_macro_signature})
            endif()
            if (DEFINED ${_csr_macro_component})
                list(APPEND _csr_macro_inc_dirs "${_currentArg}")
            endif()
        else()
            message(FATAL_ERROR "Parameter ${_currentArg} is incorrect (${_csr_macro_action})\n"
                                ${_csr_macro_signature})
        endif()
    endforeach()

    if (${_csr_macro_condition_next})
        message(FATAL_ERROR "Parameter incorrect. Conditional statement was not ended with a DIRECTORIES tag\n"
                            ${_csr_macro_signature})
    endif()

    if (_csr_macro_platform_set)
        set(_csr_macro_should_include ${_csr_macro_platform_found})
    elseif (CSR_INTERNAL_PLATFORM)
        foreach (_csr_macro_platform ${CSR_INTERNAL_PLATFORM})
            if (${_csr_macro_platform} STREQUAL ${CSR_PLATFORM})
                set (_csr_macro_should_include ${CSR_INTERNAL_GROUP_SHOULD_BUILD})
            endif()
        endforeach()
    else()
        set(_csr_macro_should_include TRUE)
    endif()

    list (LENGTH _csr_macro_inc_dirs _csr_macro_inc_dirs_count)
    if(${_csr_macro_inc_dirs_count} GREATER 0)
        if (${_csr_macro_should_include})
            foreach(_csr_macro_inc_dir ${_csr_macro_inc_dirs})
                include_directories(${_csr_macro_inc_dir})
            endforeach()
        endif()
    endif()
endmacro(csr_include_directories)

macro(csr_add_subdirectory dir)
    set(CSR_INTERNAL_PLATFORM_CLEAR FALSE)
    set(CSR_INTERNAL_GROUP_NAME)
    set(CSR_INTERNAL_GROUP_SHOULD_BUILD_CLEAR FALSE)

    set(_csr_macro_action "NONE")
    set(_csr_macro_group_name)
    set(_csr_macro_group_friendly)
    set(_csr_macro_platforms)
    set(_csr_macro_component)

    get_filename_component(abs_dir ${dir} ABSOLUTE)
    file(RELATIVE_PATH _relative_dir ${PROJECT_SOURCE_DIR} ${abs_dir})
    csr_debug_output(" * Directory: ${_relative_dir}\n")

    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "GROUP")
            set(_csr_macro_action "${_currentArg}")
        elseif ("${_currentArg}" STREQUAL "PLATFORM")
            set(_csr_macro_action "${_currentArg}")
            set(CSR_INTERNAL_PLATFORM_CLEAR TRUE)
        elseif (${_csr_macro_action} STREQUAL "GROUP")
            if (_csr_macro_group_name)
                set(CSR_INTERNAL_GROUP_NAME "${_currentArg}")
            else()
                set(_csr_macro_group_name "${_currentArg}")
            endif()
        elseif (${_csr_macro_action} STREQUAL "PLATFORM")
            list(APPEND _csr_macro_platforms "${_currentArg}")
        endif()
    endforeach()

    if (_csr_macro_platforms)
        if (CSR_INTERNAL_PLATFORM)
            message(FATAL_ERROR "The directory ${dir} currently has multiple platforms targeting which is not supported. It is likely a higher level directory already has defined platforms for this directory")
        else()
            set(CSR_INTERNAL_PLATFORM ${_csr_macro_platforms})
        endif()
    endif()

    if (_csr_macro_group_name AND CSR_INTERNAL_GROUP_NAME)
        get_property(_csr_macro_group_tmp GLOBAL PROPERTY ${_csr_macro_group_name})
        if (NOT _csr_macro_group_tmp)
            message(FATAL_ERROR "The group ${_csr_macro_group_name} has not been defined")
        endif()

        if (NOT ${CSR_INTERNAL_GROUP_NAME} STREQUAL ${${_csr_macro_group_name}})
            set(CSR_INTERNAL_GROUP_SHOULD_BUILD FALSE)
            set(CSR_INTERNAL_GROUP_SHOULD_BUILD_CLEAR TRUE)
        endif()

        get_property(_csr_macro_group_selections GLOBAL PROPERTY ${_csr_macro_group_name}_SELECTIONS)
        list (FIND _csr_macro_group_selections ${CSR_INTERNAL_GROUP_NAME} _count)
        if (_count EQUAL -1)
            message (FATAL_ERROR "csr_add_subdirectory called with undefined group selection. Make sure the selection is defined in the group definition")
        endif()
        string(TOUPPER ${CSR_INTERNAL_GROUP_NAME} _csr_macro_group_friendly)
        set_property(GLOBAL APPEND PROPERTY ${_csr_macro_group_name}_SELECTIONS_AVAILABLE "${_csr_macro_group_friendly}")
    endif()

    if(IS_DIRECTORY ${abs_dir} AND EXISTS "${abs_dir}/CMakeLists.txt")
        if (${CSR_${CSR_CURRENT_TECHNOLOGY}_ROOT} STREQUAL ${dir})
            # Handle the case where technologies are external
            add_subdirectory(${dir} ${PROJECT_BINARY_DIR}/${CSR_CURRENT_TECHNOLOGY_LC})
        else()
            add_subdirectory(${dir})
        endif()
        if (NOT EXISTS ${abs_dir}/CMakeLists.txt)
            message (FATAL_ERROR "${abs_dir}/CMakeLists.txt does not exists")
        endif()

        file(RELATIVE_PATH _input_dir ${CSR_${CSR_CURRENT_TECHNOLOGY}_ROOT} ${abs_dir})
        if (_input_dir)
            # All tech top level directly are handled in the main build_system.cmake
            file (APPEND ${CSR_${CSR_CURRENT_TECHNOLOGY}_INSTALL_FILE}
                  "csr_install_in_use_files(\"${CSR_CURRENT_TECHNOLOGY}\" \"${_input_dir}\")\n")
        endif()
    else()
        get_filename_component(_abs_dir ${dir} ABSOLUTE)
        file (RELATIVE_PATH _relative_dir ${PROJECT_SOURCE_DIR} ${_abs_dir})
        if (${CSR_BUILD_SYSTEM_DEBUG})
            message (STATUS "Skipping add directory: ${_relative_dir}")
        endif()
    endif()

    if (${CSR_INTERNAL_PLATFORM_CLEAR})
        set(CSR_INTERNAL_PLATFORM)
    endif()
    if (${CSR_INTERNAL_GROUP_SHOULD_BUILD_CLEAR})
        set(CSR_INTERNAL_GROUP_SHOULD_BUILD TRUE)
    endif()
endmacro(csr_add_subdirectory)

macro(csr_add_document)
    set(_csr_macro_action "NONE")
    set(_csr_macro_documents)
    set(_csr_macro_component)
    set(_csr_macro_signature
            "csr_add_document(COMPONENT <name> DOCUMENTS doc1 doc2 ... docN)")
    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "COMPONENT" OR
            "${_currentArg}" STREQUAL "DOCUMENTS")
            set(_csr_macro_action "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "COMPONENT")
            set(_csr_macro_component "${_currentArg}")
            csr_validate_component(${_csr_macro_component} _selected)
            set(_csr_macro_action "NONE")
            if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "none" AND NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin")
                csr_add_artifact_location()
            endif()
        elseif(${_csr_macro_action} STREQUAL "DOCUMENTS")
            if (NOT _csr_macro_component)
                message (FATAL_ERROR "Tag: 'COMPONENT name' must the present prior to the list of documents")
            endif()
            if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "none")
                list(APPEND _csr_macro_documents "${_currentArg}")
            endif()
        else()
            message(FATAL_ERROR "Parameter ${_currentArg} is incorrect\n"
                                ${_csr_macro_signature})
        endif()
    endforeach()
    if (NOT _csr_macro_component)
        message(FATAL_ERROR "COMPONENT information is missing\n"
                            ${_csr_macro_signature})
    endif()

    foreach (_csr_macro_document ${_csr_macro_documents})
        get_filename_component(_csr_macro_filename ${_csr_macro_document} ABSOLUTE)
        get_filename_component(_csr_macro_path ${_csr_macro_filename} PATH)
        get_filename_component(_csr_macro_filename_we ${_csr_macro_filename} NAME_WE)
        set (_csr_macro_filename_pdf "${_csr_macro_path}/${_csr_macro_filename_we}.pdf")
        if (NOT EXISTS ${_csr_macro_filename} AND NOT EXISTS ${_csr_macro_filename_pdf})
            message (FATAL_ERROR "Document ${_csr_macro_filename_we} does not exist")
        endif()
        csr_install_files(COMPONENT ${_csr_macro_component} "${_csr_macro_filename_pdf}")
    endforeach()
endmacro(csr_add_document)

macro (csr_create_file filename)
    file(RELATIVE_PATH _rel_dir ${PROJECT_SOURCE_DIR} ${filename})
    file (WRITE ${filename} "")
endmacro()

macro (csr_create_cmake_file filename)
    if (CSR_BUILD_SYSTEM_DEBUG)
        file(RELATIVE_PATH _rel_dir ${PROJECT_SOURCE_DIR} ${filename})
        message (STATUS "Creating ${_rel_dir}")
    endif()

    file (WRITE ${filename}  "##############################################################################\n")
    file (APPEND ${filename} "#\n")
    file (APPEND ${filename} "#       Copyright (c) 2011-2017 Qualcomm Technologies International, Ltd.\n")
    file (APPEND ${filename} "#\n")
    file (APPEND ${filename} "#\n")
    file (APPEND ${filename} "#       All Rights Reserved.\n")
    file (APPEND ${filename} "#\n")
    file (APPEND ${filename} "##############################################################################\n\n")
endmacro()

macro (csr_create_c_file filename)
    if (CSR_BUILD_SYSTEM_DEBUG)
        file(RELATIVE_PATH _rel_dir ${PROJECT_SOURCE_DIR} ${filename})
        message (STATUS "Creating ${_rel_dir}")
    endif()

    file (WRITE ${filename}  "/*****************************************************************************\n")
    file (APPEND ${filename} "\n")
    file (APPEND ${filename} "        Copyright (c) 2011-2017 Qualcomm Technologies International, Ltd.\n")
    file (APPEND ${filename} "\n")
    file (APPEND ${filename} "\n")
    file (APPEND ${filename} "        All Rights Reserved.\n")
    file (APPEND ${filename} "\n")
    file (APPEND ${filename} "*****************************************************************************/\n")
    file (APPEND ${filename} "\n")
    file (APPEND ${filename} "/* Note: this is an auto-generated file. */\n")
    file (APPEND ${filename} "\n")
endmacro()

function (csr_add_artifact_location)
    if(DEFINED CSR_PRODUCT_FILE)
        set(_csr_macro_if_tech ${CSR_CURRENT_TECHNOLOGY})

        foreach(_currentArg ${ARGN})
            if ("${_currentArg}" STREQUAL "TECHNOLOGY")
                set(_csr_macro_action "${_currentArg}")
            elseif (${_csr_macro_action} STREQUAL "TECHNOLOGY")
                set(_csr_macro_if_tech "${_currentArg}")
            else ()
                message(FATAL_ERROR "Parameter incorrect\n"
                                    ${_csr_macro_signature})
            endif()
        endforeach()

        if (NOT _csr_macro_if_tech)
            message(FATAL_ERROR "Technology unknown\n"
                                ${_csr_macro_signature})
        endif()

        file(RELATIVE_PATH _csr_macro_relative_path ${CSR_${_csr_macro_if_tech}_ROOT} ${CMAKE_CURRENT_SOURCE_DIR})
        # Top level tech dirs are automatically handled in build_system.cmake
        if (_csr_macro_relative_path)
            string(TOUPPER "${_csr_macro_relative_path}" _csr_macro_relative_path_upper)
            string(REGEX REPLACE "[/]+" "_" _csr_macro_subdir_identifier ${_csr_macro_relative_path_upper})
            set_property(GLOBAL APPEND PROPERTY CSR_${_csr_macro_if_tech}_ARTIFACT_MAPPING ${_csr_macro_subdir_identifier})
        endif()
    endif()
endfunction (csr_add_artifact_location)

macro (csr_location_in_use _technology location _output)
    set (${_output} FALSE)
    if (CSR_${_technology}_MAPPING_ARTIFACTS_LIST)
        get_filename_component(abs_dir ${location} ABSOLUTE)
        if (IS_DIRECTORY "${abs_dir}")
            file(RELATIVE_PATH _relative_path ${CSR_${_technology}_ROOT} ${abs_dir})
            if (_relative_path)
                string(TOUPPER "${_relative_path}" _relative_path_uc)
                string(REGEX REPLACE "[/]+" "_" _artifact ${_relative_path_uc})
                foreach (_candidate ${CSR_${_technology}_MAPPING_ARTIFACTS_LIST})
                    if (${_candidate} MATCHES "^${_artifact}")
                        set (${_output} TRUE)
                        break()
                    endif()
                endforeach()
            else()
                if (CSR_${_technology}_ROOT STREQUAL ${abs_dir})
                    list (LENGTH CSR_${_technology}_MAPPING_ARTIFACTS_LIST _count)
                    if (_count)
                        set (${_output} TRUE)
                    endif()
                else()
                    message (FATAL_ERROR "\"${location}\" could not be resolved")
                endif()
            endif()
        endif()
    endif()
endmacro(csr_location_in_use)

macro(csr_add_module_test)
    csr_add_executable(${ARGV} DESTINATION ${CMAKE_CURRENT_BINARY_DIR} TEST EXCLUDE_FROM_ALL)
endmacro(csr_add_module_test)

macro(csr_add_java_archive lib)
    set(_csr_macro_sources)
    set(_csr_macro_archives)
    set(_csr_macro_action "NONE")
    set(_csr_macro_manifest)
    set(_csr_macro_component)
    set(_csr_macro_depends)
    set(_csr_macro_sourcepath ${CMAKE_CURRENT_SOURCE_DIR})
    set(_csr_macro_options)
    set(_csr_macro_should_build ${CSR_PERFORM_BUILD})
    set(_csr_macro_signature
            "csr_add_java_library(<name>\n"
            "                     COMPONENT <name> [SOURCES file1 file2 ... fileN]\n"
            "                     [LIBRARIES lib1 lib2 ... libN]\n"
            "                     [DEPENDS obj1 obj2 ... objN])")

    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "SOURCES" OR
            "${_currentArg}" STREQUAL "COMPONENT" OR
            "${_currentArg}" STREQUAL "ARCHIVES" OR
            "${_currentArg}" STREQUAL "MANIFEST" OR
            "${_currentArg}" STREQUAL "SOURCEPATH")
            set(_csr_macro_action "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "COMPONENT")
            set(_csr_macro_component "${_currentArg}")
            csr_validate_component(${_csr_macro_component}  _selected)
            if (DEFINED ${_csr_macro_component})
                list(APPEND _csr_macro_component_list "${_currentArg}")
                if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "none")
                    if (${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin" OR
                        ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "all")
                        set(_csr_macro_install_binary TRUE)
                    endif()
                    if (NOT ${${_csr_macro_component}_INSTALL_TYPE} STREQUAL "bin")
                        csr_add_artifact_location()
                    endif()
                endif()
            endif()
        elseif (${_csr_macro_action} STREQUAL "SOURCES")
            if (NOT _csr_macro_component)
                message (FATAL_ERROR "Tag: 'COMPONENT name' must the present prior to the tag SOURCES")
            endif()
            if (DEFINED ${_csr_macro_component})
                list(APPEND _csr_macro_sources "${_currentArg}")
                csr_install_files(COMPONENT ${_csr_macro_component} "${_currentArg}" INSTALL_TYPE "src")
            endif()
        elseif (${_csr_macro_action} STREQUAL "SOURCEPATH")
            get_filename_component(_csr_macro_sourcepath_full "${_currentArg}" ABSOLUTE)
            if (CMAKE_HOST_SYSTEM MATCHES Windows AND NOT CYGWIN)
                list(APPEND _csr_macro_sourcepath "${_csr_macro_sourcepath_full}")
            else()
                set(_csr_macro_sourcepath "${_csr_macro_sourcepath}:${_csr_macro_sourcepath_full}")
            endif()
        elseif (${_csr_macro_action} STREQUAL "ARCHIVES")
            list(APPEND _csr_macro_archives ${_currentArg})
            get_property(_csr_macro_depend GLOBAL PROPERTY CSR_JAVA_ARCHIVE_${_currentArg}_DEPENDS)
            list(APPEND _csr_macro_depends "${_csr_macro_depend}")
        elseif (${_csr_macro_action} STREQUAL "MANIFEST")
            if (DEFINED ${_csr_macro_component})
                set(_csr_macro_manifest "${_currentArg}")
                csr_install_files(COMPONENT ${_csr_macro_component} "${_currentArg}" INSTALL_TYPE "src")
            endif()
        else ()
            message(FATAL_ERROR "Parameter incorrect\n"
                                ${_csr_macro_signature})
        endif()
    endforeach()
    if (_csr_macro_sources)
        list (REMOVE_DUPLICATES _csr_macro_sources)
    endif()
    list (LENGTH _csr_macro_sources _csr_macro_sources_count)
    if(_csr_macro_should_build AND ${_csr_macro_sources_count} GREATER 0 AND JAVA_FOUND)
        set(_csr_macro_classes)
        set(_csr_java_class_output_path "${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${lib}.dir")
        file (WRITE ${_csr_java_class_output_path}/csr_java_source_filelist "-d ${CMAKE_CURRENT_BINARY_DIR}\n-classpath ${_csr_macro_sourcepath}\n")
        file (WRITE ${_csr_java_class_output_path}/csr_java_classes_filelist "")
        foreach (_csr_macro_source ${_csr_macro_sources})
            get_filename_component(_csr_macro_source_name ${_csr_macro_source} NAME_WE )
            get_filename_component(_csr_macro_source_abs ${_csr_macro_source} ABSOLUTE)
            file (APPEND ${_csr_java_class_output_path}/csr_java_source_filelist "${_csr_macro_source_abs}\n")
            file (RELATIVE_PATH _csr_macro_source_abs ${CMAKE_CURRENT_SOURCE_DIR} ${_csr_macro_source_abs})
            get_filename_component(_csr_macro_source_path ${_csr_macro_source_abs} PATH)
            set(_csr_macro_class "${_csr_macro_source_path}/${_csr_macro_source_name}.class")
            list(APPEND _csr_macro_classes ${_csr_macro_class})
            file (APPEND ${_csr_java_class_output_path}/csr_java_classes_filelist "${_csr_macro_class}\n")
        endforeach()
        add_custom_command(OUTPUT  ${_csr_java_class_output_path}/sources.depend
                           COMMAND ${Java_JAVAC_EXECUTABLE} @${_csr_java_class_output_path}/csr_java_source_filelist
                           COMMAND ${CMAKE_COMMAND} -E touch ${_csr_java_class_output_path}/sources.depend
                           DEPENDS ${_csr_macro_sources} ${_csr_macro_depends}
                           COMMENT "Building ${lib}")
        if (_csr_macro_manifest)
            get_filename_component(_csr_macro_manifest ${_csr_macro_manifest} ABSOLUTE)
            set (_csr_macro_locations "${CMAKE_CURRENT_BINARY_DIR}")
            foreach (_csr_macro_archive ${_csr_macro_archives})
                get_property(_csr_macro_location GLOBAL PROPERTY CSR_JAVA_ARCHIVE_${_csr_macro_archive}_LOCATION)
                set (_csr_macro_locations "${_csr_macro_locations}:${_csr_macro_location}")
            endforeach()
            if (CMAKE_HOST_SYSTEM MATCHES Windows)
                add_custom_command(OUTPUT "${PROJECT_BINARY_DIR}/bin/java/${lib}.jar"
                                   COMMAND ${CMAKE_COMMAND} -DCSR_JAVA_OUTPUT_FILE="${_csr_java_class_output_path}/csr_java_classes_filelist" -DCSR_JAVA_ARCHIVE_LOCATIONS="${_csr_macro_locations}" -P ${CSR_BUILD_ROOT}/build_system_java_class_list.cmake
                                   COMMAND ${Java_JAR_EXECUTABLE} -cfm "${PROJECT_BINARY_DIR}/bin/java/${lib}.jar" ${_csr_macro_manifest} @${_csr_java_class_output_path}/csr_java_classes_filelist
                                   DEPENDS ${_csr_macro_depends} ${_csr_java_class_output_path}/sources.depend ${CSR_BUILD_ROOT}/build_system_java_class_list.cmake
                                   COMMENT "Archiving ${lib}"
                                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
                file(WRITE "${PROJECT_BINARY_DIR}/bin/java/${lib}.bat" "@echo off\n\"${Java_JAVA_EXECUTABLE}\" -jar \"${PROJECT_BINARY_DIR}/bin/java/${lib}.jar\"\n")
                add_custom_target(${lib} ALL DEPENDS "${PROJECT_BINARY_DIR}/bin/java/${lib}.jar")
            else()
                add_custom_command(OUTPUT "${PROJECT_BINARY_DIR}/bin/java/${lib}"
                                   COMMAND ${CMAKE_COMMAND} -DCSR_JAVA_OUTPUT_FILE="${_csr_java_class_output_path}/csr_java_classes_filelist" -DCSR_JAVA_ARCHIVE_LOCATIONS="${_csr_macro_locations}" -P ${CSR_BUILD_ROOT}/build_system_java_class_list.cmake
                                   COMMAND ${Java_JAR_EXECUTABLE} -cfm ${PROJECT_BINARY_DIR}/bin/java/${lib} ${_csr_macro_manifest} @${_csr_java_class_output_path}/csr_java_classes_filelist
                                   COMMAND chmod a+x ${PROJECT_BINARY_DIR}/bin/java/${lib}
                                   DEPENDS ${_csr_macro_depends} ${_csr_java_class_output_path}/sources.depend ${CSR_BUILD_ROOT}/build_system_java_class_list.cmake
                                   COMMENT "Archiving ${lib}"
                                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
                add_custom_target(${lib} ALL DEPENDS "${PROJECT_BINARY_DIR}/bin/java/${lib}")
            endif()
        else()
            add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${lib}.jar"
                               COMMAND ${Java_JAR_EXECUTABLE} -cf "${CMAKE_CURRENT_BINARY_DIR}/${lib}.jar" ${_csr_macro_libraries} @${_csr_java_class_output_path}/csr_java_classes_filelist
                               DEPENDS ${_csr_java_class_output_path}/sources.depend
                               COMMENT "Archiving ${lib}"
                               WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
            set_property(GLOBAL PROPERTY CSR_JAVA_ARCHIVE_${lib}_LOCATION ${CMAKE_CURRENT_BINARY_DIR})
            add_custom_target(${lib} ALL DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${lib}.jar")
            set_property(GLOBAL PROPERTY CSR_JAVA_ARCHIVE_${lib}_DEPENDS ${lib} ${_csr_java_class_output_path}/sources.depend)
        endif()
    endif()
endmacro(csr_add_java_archive)

macro(csr_set_cache_parameter var)
    set(_csr_macro_action "NONE")
    set(_csr_macro_value)
    set(_csr_macro_description)
    set(_csr_macro_strings)
    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "VALUE" OR "${_currentArg}" STREQUAL "DESCRIPTION" OR "${_currentArg}" STREQUAL "STRINGS")
            set(_csr_macro_action "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "VALUE")
            set(_csr_macro_value "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DESCRIPTION")
            set(_csr_macro_description "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "STRINGS")
            list(APPEND _csr_macro_strings "${_currentArg}")
        else ()
            message(FATAL_ERROR "Parameter incorrect\n"
                "csr_set_cache_parameter(<name>\n"
                "                        [VALUE <value>]\n"
                "                        [VALUES val1 val2 ... valN]\n"
                "                        [DESCRIPTION <text>])")
        endif()
    endforeach()
    if (_csr_macro_description)
        set(_csr_macro_description_resolved ${_csr_macro_description})
    else()
        set(_csr_macro_description_resolved ${${var}_CACHE_DESCRIPTION})
    endif()
    if (${CSR_CACHE_CONTROL} STREQUAL "INIT")
        if (DEFINED _csr_macro_value)
            set(${var}_VALUE ${_csr_macro_value})
        endif()
        if (_csr_macro_description)
            set(${var}_DESCRIPTION ${_csr_macro_description})
        endif()
        if (_csr_macro_strings)
            set(${var}_STRINGS ${_csr_macro_strings})
        endif()
    elseif (${CSR_CACHE_CONTROL} STREQUAL "UNLOADING")
        set_property(CACHE ${var} PROPERTY VALUE ${${var}_CACHE_DEFAULT})
        set_property(CACHE ${var} PROPERTY HELPSTRING ${${var}_CACHE_DESCRIPTION})
        if (${${var}_CACHE_STRINGS})
            set_property(CACHE ${var} PROPERTY STRINGS ${${var}_CACHE_STRINGS})
        endif()
    elseif (${CSR_CACHE_CONTROL} STREQUAL "LOADING")
        if (DEFINED _csr_macro_value)
            set(${var}_VALUE ${_csr_macro_value})
            set_property(CACHE ${var} PROPERTY VALUE ${_csr_macro_value})
        endif()
        if (_csr_macro_description)
            set(${var}_DESCRIPTION ${_csr_macro_description})
            set_property(CACHE ${var} PROPERTY HELPSTRING ${_csr_macro_description})
        endif()
        if (_csr_macro_strings)
            set(${var}_STRINGS ${_csr_macro_strings})
            set_property(CACHE ${var} PROPERTY STRINGS ${_csr_macro_strings})
        endif()
    endif()
    set_property(GLOBAL APPEND PROPERTY CSR_CACHE_CONFIG_OVERRIDES ${var})
endmacro(csr_set_cache_parameter)

macro(csr_define_cache_parameter var)
    set(_csr_macro_action "NONE")
    set(_csr_macro_default)
    set(_csr_macro_description)
    set(_csr_macro_strings)
    set(_csr_macro_type)
    set(_csr_macro_depends)
    set(_csr_macro_signature
            "csr_define_cache_parameter(<name>\n"
            "                           TYPE <name> DESCRIPTION <text> DEFAULT <value>\n"
            "                           [DEPENDS cfg1 cfg2 ... cfgN]\n"
            "                           [STRINGS str1 str2 ... strN])")

    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "DEFAULT" OR
            "${_currentArg}" STREQUAL "DESCRIPTION" OR
            "${_currentArg}" STREQUAL "STRINGS" OR
            "${_currentArg}" STREQUAL "TYPE" OR
            "${_currentArg}" STREQUAL "DEPENDS")
            set(_csr_macro_action "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DEFAULT")
            set(_csr_macro_default "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DESCRIPTION")
            set(_csr_macro_description "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "STRINGS")
            list(APPEND _csr_macro_strings "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "TYPE")
            set(_csr_macro_type "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DEPENDS")
            list(APPEND _csr_macro_depends "${_currentArg}")
        else ()
            message(FATAL_ERROR "Parameter incorrect\n"
                                ${_csr_macro_signature})
        endif()
    endforeach()
    if (NOT _csr_macro_type OR NOT _csr_macro_description)
        message(FATAL_ERROR "Parameter missing. TYPE, DESCRIPTION and VALUE most be present and valid\n"
                            ${_csr_macro_signature})
    endif()
    set(${var}_CACHE_DEFAULT     "${_csr_macro_default}"     CACHE INTERNAL "")
    set(${var}_CACHE_DESCRIPTION "${_csr_macro_description}" CACHE INTERNAL "")
    set(${var}_CACHE_STRINGS     "${_csr_macro_strings}"     CACHE INTERNAL "")
    if (_csr_macro_depends)
        set(${var}_CACHE_DEPENDS "${_csr_macro_depends}"     CACHE INTERNAL "")
    endif()
    if (DEFINED ${var}_VALUE)
        set(_csr_macro_default "${${var}_VALUE}")
    endif()
    if (DEFINED ${var}_DESCRIPTION)
        set(_csr_macro_description "${${var}_DESCRIPTION}")
    endif()
    if (DEFINED ${var}_STRINGS)
        set(_csr_macro_strings "${${var}_STRINGS}")
    endif()
    if (_csr_macro_depends)
        CMAKE_DEPENDENT_OPTION(${var} ${_csr_macro_description} ${_csr_macro_default} "${_csr_macro_depends}" OFF)
    else()
        get_property(_csr_macro_type_internal CACHE ${var} PROPERTY TYPE)
        if (_csr_macro_type_internal AND NOT ${_csr_macro_type_internal} STREQUAL "UNINITIALIZED")
            if (NOT ${_csr_macro_type_internal} STREQUAL ${_csr_macro_type})
                unset (${var} CACHE)
            endif()
        endif()
        set (${var} ${_csr_macro_default} CACHE ${_csr_macro_type} ${_csr_macro_description})
        if (_csr_macro_strings)
            set_property(CACHE ${var} PROPERTY STRINGS ${_csr_macro_strings})
        endif()
    endif()
    set_property(GLOBAL APPEND PROPERTY CSR_CACHE_CONFIG_VALUES ${var})
endmacro(csr_define_cache_parameter)

macro(csr_load_cache_config config_path cache_var cache_comment)
    if (EXISTS ${config_path})
        set(${cache_var} default CACHE STRING ${cache_comment})

        file(GLOB CFGFILES ${config_path}/config-*.cmake)
        if (CFGFILES)
            set(CSR_CONFIGS default)
            foreach(CFGFILE ${CFGFILES})
                string(REPLACE "${config_path}/config-" "" CFGFILE ${CFGFILE})
                string(REPLACE ".cmake"                 "" CFGFILE ${CFGFILE})
                list(APPEND CSR_CONFIGS ${CFGFILE})
            endforeach(CFGFILE ${CFGFILES})
            list(SORT CSR_CONFIGS)
            set_property(CACHE ${cache_var} PROPERTY STRINGS ${CSR_CONFIGS})
        endif()

        if (DEFINED ${cache_var}_PREVIOUS)
            if (NOT ${${cache_var}_PREVIOUS} STREQUAL ${${cache_var}})
                if (NOT ${${cache_var}_PREVIOUS} STREQUAL "default")
                    set (CSR_CACHE_CONTROL "UNLOADING")
                    include (${config_path}/config-${${cache_var}_PREVIOUS}.cmake OPTIONAL RESULT_VARIABLE _csr_macro_filefound)
                endif()
                if (NOT ${${cache_var}} STREQUAL "default")
                    set (CSR_CACHE_CONTROL "LOADING")
                    include (${config_path}/config-${${cache_var}}.cmake OPTIONAL RESULT_VARIABLE _csr_macro_filefound)
                    if (NOT _csr_macro_filefound)
                        message (FATAL_ERROR "Value ${${cache_var}} selected for configuration ${cache_var} in invalid")
                    endif()
                endif()
            endif()
        else()
            if (NOT ${${cache_var}} STREQUAL "default")
                message (STATUS "Loading configuration: ${${cache_var}}")
                set (CSR_CACHE_CONTROL "INIT")
                include (${config_path}/config-${${cache_var}}.cmake OPTIONAL RESULT_VARIABLE _csr_macro_filefound)
                if (NOT _csr_macro_filefound)
                    message (FATAL_ERROR "Value ${${cache_var}} selected for configuration ${cache_var} in invalid")
                endif()
            endif()
        endif()
        set(${cache_var}_PREVIOUS "${${cache_var}}" CACHE INTERNAL "")
    endif()
endmacro(csr_load_cache_config)

macro(csr_add_technology)
    set(_generate_ver_mk FALSE)
    set(_csr_macro_action "NONE")
    set(_csr_macro_name)
    set(_csr_macro_component_file)
    set(_csr_macro_display_name)
    set(_csr_macro_description)
    set(_csr_macro_signature
            "csr_add_technology(NAME <name> DISPLAY_NAME <name> DESCRIPTION <text>)")

    foreach(_currentArg ${ARGN})
        if ("${_currentArg}" STREQUAL "NAME" OR
            "${_currentArg}" STREQUAL "DISPLAY_NAME" OR
            "${_currentArg}" STREQUAL "DESCRIPTION")
            set(_csr_macro_action "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "NAME")
            set(_csr_macro_name "${_currentArg}")
            set(CSR_${_csr_macro_name}_BUILDSYSTEM_AVAILABLE FALSE)
        elseif (${_csr_macro_action} STREQUAL "DISPLAY_NAME")
            set(_csr_macro_display_name "${_currentArg}")
        elseif (${_csr_macro_action} STREQUAL "DESCRIPTION")
            set(_csr_macro_description "${_currentArg}")
        else()
            message(FATAL_ERROR "Parameter '${_currentArg}' incorrect\n"
                                ${_csr_macro_signature})
        endif()
    endforeach()
    if (NOT _csr_macro_name OR NOT _csr_macro_display_name OR NOT _csr_macro_description)
        message(FATAL_ERROR "Parameter missing\n"
                            ${_csr_macro_signature})
    endif()

    if (DEFINED CSR_${_csr_macro_name}_ROOT AND NOT "${CSR_${_csr_macro_name}_ROOT}" STREQUAL "")
        if (IS_DIRECTORY "${CMAKE_BINARY_DIR}/${CSR_${_csr_macro_name}_ROOT}")
          get_filename_component(CSR_${_csr_macro_name}_ROOT "${CMAKE_BINARY_DIR}/${CSR_${_csr_macro_name}_ROOT}" ABSOLUTE)
        endif()
        set(CSR_${_csr_macro_name}_BUILDSYSTEM_AVAILABLE TRUE)
        if (NOT EXISTS "${CSR_${_csr_macro_name}_ROOT}/CMakeLists.txt" AND EXISTS "${CSR_${_csr_macro_name}_ROOT}/ver.mk")
            set(CSR_${_csr_macro_name}_BUILDSYSTEM_AVAILABLE FALSE)
            # Add generic top component
            set (CSR_CURRENT_TECHNOLOGY "${_csr_macro_name}")
            csr_define_component(CSR_COMPONENT_${_csr_macro_name})
            unset (CSR_CURRENT_TECHNOLOGY)
            # Import version
            file (STRINGS "${CSR_${_csr_macro_name}_ROOT}/ver.mk" _ver_file)
            foreach (_ver VERSION_MAJOR VERSION_MINOR VERSION_FIXLEVEL VERSION_BUILD)
                foreach (_str ${_ver_file})
                    set(_output)
                    string (REGEX MATCH "${_ver}:=(.*)" _output ${_str})
                    if (_output)
                        set (CSR_${_csr_macro_name}_${_ver} ${CMAKE_MATCH_1})
                    endif()
                endforeach()
            endforeach()

            string(TOLOWER ${_csr_macro_name} _csr_macro_name_lc)
            set(_file "${CMAKE_CURRENT_BINARY_DIR}/inc/csr_${_csr_macro_name_lc}_config.h")
            csr_create_c_file(${_file})
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION_MAJOR    ${CSR_${_csr_macro_name}_VERSION_MAJOR}\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION_MINOR    ${CSR_${_csr_macro_name}_VERSION_MINOR}\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION_FIXLEVEL ${CSR_${_csr_macro_name}_VERSION_FIXLEVEL}\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION_BUILD    ${CSR_${_csr_macro_name}_VERSION_BUILD}\n")
            file (APPEND ${_file} "#ifdef CSR_${_csr_macro_name}_RELEASE_TYPE_ENG\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION \"${CSR_${_csr_macro_name}_VERSION_MAJOR}.${CSR_${_csr_macro_name}_VERSION_MINOR}.${CSR_${_csr_macro_name}_VERSION_FIXLEVEL}.${CSR_${_csr_macro_name}_VERSION_BUILD}\"\n")
            file (APPEND ${_file} "#else\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION \"${CSR_${_csr_macro_name}_VERSION_MAJOR}.${CSR_${_csr_macro_name}_VERSION_MINOR}.${CSR_${_csr_macro_name}_VERSION_FIXLEVEL}\"\n")
            file (APPEND ${_file} "#endif\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION_NUMBER CSR_VERSION_NUMBER(${CSR_${_csr_macro_name}_VERSION_MAJOR}, ${CSR_${_csr_macro_name}_VERSION_MINOR}, ${CSR_${_csr_macro_name}_VERSION_FIXLEVEL})\n")
            file (APPEND ${_file} "#define CSR_${_csr_macro_name}_VERSION_CHECK(major,minor,fix) (CSR_${_csr_macro_name}_VERSION_NUMBER >= CSR_VERSION_NUMBER(major,minor,fix))\n")
            if (${_csr_macro_name} STREQUAL "BT")
                file (APPEND ${_file} "#include \"${CSR_${_csr_macro_name}_ROOT}/inc/csr_bt_config_global.h\"\n")
            endif()

            # Add generic include dir
            set(_include_dirs ${CSR_${_csr_macro_name}_ROOT}/config
                              ${CSR_${_csr_macro_name}_ROOT}/inc
                              ${CSR_${_csr_macro_name}_ROOT}/bsp/inc
                              ${CSR_${_csr_macro_name}_ROOT}/gsp/inc)

            foreach (_dir ${_include_dirs})
                if (IS_DIRECTORY ${_dir})
                    include_directories(${_dir})
                endif()
            endforeach()

            if (${_csr_macro_name} STREQUAL "BT")
                include_directories(${CSR_${_csr_macro_name}_ROOT}/profile_managers/converter)
                add_definitions(-DBUILD_FOR_HOST)
                if (CSR_AMP_ENABLE)
                    add_definitions(-DINSTALL_AMP_SUPPORT)
                endif()
            endif()

            # Collect all libraries
            set (_csr_macro_locations_lib)
            foreach (_lib_regex "output/*/*/lib/*" "bsp/ports/*/output/*/*/lib/*")
                set (_lib)
                file (GLOB_RECURSE _lib "${CSR_${_csr_macro_name}_ROOT}/${_lib_regex}")
                list (APPEND _csr_macro_locations_lib ${_lib})
            endforeach()
            if (_csr_macro_locations_lib)
                list (SORT _csr_macro_locations_lib)
                set (_configs)
                set (_targets)
                foreach (_location ${_csr_macro_locations_lib})
                    get_filename_component(_location "${_location}" ABSOLUTE)
                    string(REGEX MATCH "/output/(.*)/(.*)/lib/" _match ${_location})
                    if (NOT _match)
                        message (FATAL_ERROR "Could not regex match lib path")
                    endif()
                    list (APPEND _configs ${CMAKE_MATCH_1})
                    list (APPEND _targets ${CMAKE_MATCH_2})
                    list (REMOVE_DUPLICATES _configs)
                    list (REMOVE_DUPLICATES _targets)
                    list (SORT _configs)
                    list (SORT _targets)
                endforeach()
                list (GET _configs 0 _config_default)
                csr_define_cache_parameter(CSR_${_csr_macro_name}_LEGACY_CONFIG
                                           TYPE STRING
                                           DEFAULT "${_config_default}"
                                           STRINGS ${_configs}
                                           DESCRIPTION "${_csr_macro_name} legacy config")
                list (GET _targets 0 _target_default)
                csr_define_cache_parameter(CSR_${_csr_macro_name}_LEGACY_TARGET
                                           TYPE STRING
                                           DEFAULT "${_target_default}"
                                           STRINGS ${_targets}
                                           DESCRIPTION "${_csr_macro_name} legacy target")

                # Add target specific include dir
                string (REGEX MATCH "(.*)-(.*)-(.*)" _match ${CSR_${_csr_macro_name}_LEGACY_TARGET})
                set (_target_arch ${CMAKE_MATCH_1})
                if (IS_DIRECTORY ${CSR_${_csr_macro_name}_ROOT}/bsp/ports/${_target_arch}/inc)
                    include_directories(${CSR_${_csr_macro_name}_ROOT}/bsp/ports/${_target_arch}/inc)
                endif()

                foreach (_location ${_csr_macro_locations_lib})
                    set (_lib_regex "${CSR_${_csr_macro_name}_LEGACY_CONFIG}/${CSR_${_csr_macro_name}_LEGACY_TARGET}")
                    get_filename_component(_location "${_location}" ABSOLUTE)
                    get_filename_component(_lib ${_location} NAME)
                    string(REGEX REPLACE "^lib" "" _lib ${_lib})
                    string(REGEX REPLACE "\\.(lib|a)" "" _lib ${_lib})
                    string(REGEX MATCH "${_lib_regex}" _match ${_location})
                    if (_match AND NOT TARGET ${_lib})
                        # Create imported target
                        add_library(${_lib} STATIC IMPORTED)
                        # Add lib for each config (Debug, Release, etc)
                        foreach (_config ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})
                            string (TOUPPER ${_config} _config)
                            set_property(TARGET ${_lib} APPEND PROPERTY IMPORTED_CONFIGURATIONS ${_config})
                            set_target_properties(${_lib} PROPERTIES
                                                IMPORTED_LINK_INTERFACE_LANGUAGES_${_config} "C"
                                                IMPORTED_LOCATION_${_config} "${_location}")
                        endforeach()
                        csr_add_binary_library(CSR_COMPONENT_${_csr_macro_name} ${_lib})
                    endif()
                endforeach()
            endif()
        else ()
            set(_generate_ver_mk TRUE)
        endif()

        if (CSR_BACKWARDS_COMPATIBILITY_ENABLE AND _generate_ver_mk)
                    include(${CSR_${_csr_macro_name}_ROOT}/ver.cmake)
                    string(TOLOWER ${_csr_macro_name} _csr_macro_name_lc)
                    csr_create_cmake_file("${CMAKE_BINARY_DIR}/${_csr_macro_name_lc}/ver.mk")
                    file (APPEND "${CMAKE_BINARY_DIR}/${_csr_macro_name_lc}/ver.mk" "VERSION_MAJOR    := ${CSR_${_csr_macro_name}_VERSION_MAJOR}\n")
                    file (APPEND "${CMAKE_BINARY_DIR}/${_csr_macro_name_lc}/ver.mk" "VERSION_MINOR    := ${CSR_${_csr_macro_name}_VERSION_MINOR}\n")
                    file (APPEND "${CMAKE_BINARY_DIR}/${_csr_macro_name_lc}/ver.mk" "VERSION_FIXLEVEL := ${CSR_${_csr_macro_name}_VERSION_FIXLEVEL}\n")
                    file (APPEND "${CMAKE_BINARY_DIR}/${_csr_macro_name_lc}/ver.mk" "VERSION_BUILD    := ${CSR_${_csr_macro_name}_VERSION_BUILD}\n")
        endif()

        csr_define_cache_parameter(CSR_${_csr_macro_name}_ROOT
                                   TYPE PATH
                                   DEFAULT "${CSR_${_csr_macro_name}_ROOT}"
                                   DESCRIPTION "${_csr_macro_name} root folder")
        list(APPEND CSR_TECHNOLOGIES ${_csr_macro_name})
        set (CSR_${_csr_macro_name}_DISPLAY_NAME ${_csr_macro_display_name})
        set (CSR_${_csr_macro_name}_DESCRIPTION ${_csr_macro_description})
        set (CSR_${_csr_macro_name}_EXPORT_LIB "")
    endif()
endmacro(csr_add_technology)
